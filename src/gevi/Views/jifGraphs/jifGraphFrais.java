/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifPeriodReport.java
 *
 * Created on 9 avr. 2009, 17:13:13
 */
package gevi.Views.jifGraphs;

import gevi.Views.*;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import gevi.Model.Categorie;
import gevi.Model.Depense;
import gevi.Model.Document;
import gevi.Model.Singleton;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.print.PrinterException;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.net.URISyntaxException;
import java.text.AttributedString;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author root
 */
public class jifGraphFrais extends javax.swing.JInternalFrame {

    Document _data;
    Vector<Depense> _frais;
    Date _debut;
    Date _fin;
    ChartPanel _chartPanel;

    /** Creates new form jifPeriodReport */
    public jifGraphFrais(Document data, Date debut, Date fin) {
        initComponents();
        this.setPreferredSize(new Dimension(640, 480));
        _data = data;

        _debut = debut;
        _fin = fin;
        SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
        String titre = "Graphique (Barres) des dépenses du " + format.format(_debut) + " au " + format.format(_fin);

        this.setTitle(titre);

        int selectedCat[] = new int[_data.getCategories().size()];
        DefaultListModel model = new DefaultListModel();
        for (int cpt = 0; cpt < data.getCategories().size(); cpt++) {
            model.addElement(data.getCategories().get(cpt).getNom());
            selectedCat[cpt] = cpt;
        }
        jlsCategories.setModel(model);

        _frais = new Vector();

        JFreeChart chart;
        chart = ChartFactory.createBarChart("Dépenses par catégories", "Catégories", "Montant", null, PlotOrientation.HORIZONTAL, true, true, false);

        _chartPanel = new ChartPanel(chart, true);

        this.add(_chartPanel, BorderLayout.CENTER);

        try {
            this.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        refresh();

        jlsCategories.setSelectedIndices(selectedCat);

        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtImprimer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlsCategories = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jrbCamembert = new javax.swing.JRadioButton();
        jrbBarres = new javax.swing.JRadioButton();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gevi/images/sos_violet.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jbtOK.setText("OK");
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtImprimer.setText("Imprimer");
        jbtImprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimerActionPerformed(evt);
            }
        });
        jPanel1.add(jbtImprimer);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Catégories"));

        jlsCategories.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlsCategories.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlsCategoriesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jlsCategories);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.LINE_START);

        jPanel3.setLayout(new java.awt.GridLayout(1, 2, 1, 1));

        buttonGroup1.add(jrbCamembert);
        jrbCamembert.setSelected(true);
        jrbCamembert.setText("Camembert");
        jrbCamembert.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jrbCamembert.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jrbCamembert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCamembertActionPerformed(evt);
            }
        });
        jPanel3.add(jrbCamembert);

        buttonGroup1.add(jrbBarres);
        jrbBarres.setText("Barres");
        jrbBarres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbBarresActionPerformed(evt);
            }
        });
        jPanel3.add(jrbBarres);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        MainWindow.getMainWindow().closeWindow(this);
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimerActionPerformed

        _chartPanel.createChartPrintJob();


}//GEN-LAST:event_jbtImprimerActionPerformed

    private void jlsCategoriesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlsCategoriesValueChanged
        refresh();
    }//GEN-LAST:event_jlsCategoriesValueChanged

    private void jrbCamembertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCamembertActionPerformed
        refresh();
}//GEN-LAST:event_jrbCamembertActionPerformed

    private void jrbBarresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbBarresActionPerformed
        refresh();
}//GEN-LAST:event_jrbBarresActionPerformed

    private void refresh() {

        if (jrbBarres.isSelected()) {

            Vector<Depense> depenses = Singleton.instance().getDocument().getDepenses();
            Object selectedCategories[] = (Object[]) jlsCategories.getSelectedValues();
            _frais.clear();
            for (int i = 0; i < depenses.size(); i++) {
                Depense d = depenses.get(i);
                Date da = d.getDate();
                if ((da.before(_fin) && da.after(_debut)) || (da.equals(_fin)) || (da.equals(_debut))) {

                    String categorie = d.getCategorie().getNom();
                    boolean selectionne = false;
                    for (int cpt = 0; cpt < selectedCategories.length; cpt++) {
                        if (((String) selectedCategories[cpt]).equals(categorie)) {
                            selectionne = true;
                            break;
                        }
                    }
                    if (selectionne) {
                        _frais.add(d);
                    }
                }
            }

            DefaultCategoryDataset ds = new DefaultCategoryDataset();
            for (int cpt = 0; cpt < selectedCategories.length; cpt++) {
                double tmp = 0.0;
                ds.addValue(tmp, "", (String) selectedCategories[cpt]);
            }

            for (int i = 0; i < _frais.size(); i++) {
                Depense d = _frais.get(i);
                ds.incrementValue(d.getMontant(), "", d.getCategorie().getNom());
            }

            JFreeChart chart;
            chart = ChartFactory.createBarChart("Dépenses par catégories", "Catégories", "Montant", ds, PlotOrientation.HORIZONTAL, false, false, false);

            BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
            chart.getCategoryPlot().setBackgroundAlpha(0);
            GradientPaint gp0 = new GradientPaint(
                    0.0f, 0.0f, Color.blue,
                    0.0f, 0.0f, new Color(0, 0, 64));
            renderer.setSeriesPaint(0, gp0);
            renderer.setSeriesItemLabelsVisible(0, true);
            ItemLabelPosition pos = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
            renderer.setBasePositiveItemLabelPosition(pos);
            renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

                public String generateRowLabel(CategoryDataset arg0, int arg1) {
                    DecimalFormat df = new DecimalFormat("#,##0.00");
                    return df.format((Double) arg0.getValue("", arg0.getColumnKey(arg1))) + " €";
                }

                public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                    DecimalFormat df = new DecimalFormat("#,##0.00");
                    return df.format((Double) arg0.getValue("", arg0.getColumnKey(arg1))) + " €";
                }

                public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                    DecimalFormat df = new DecimalFormat("#,##0.00");
                    return df.format((Double) arg0.getValue(arg1, arg2)) + " €";
                }
            });
            _chartPanel.setChart(chart);
        } else {
            Vector<Depense> depenses = Singleton.instance().getDocument().getDepenses();
            Object selectedCategories[] = (Object[]) jlsCategories.getSelectedValues();
            _frais.clear();
            for (int i = 0; i < depenses.size(); i++) {
                Depense d = depenses.get(i);
                Date da = d.getDate();
                if ((da.before(_fin) && da.after(_debut)) || (da.equals(_fin)) || (da.equals(_debut))) {

                    String categorie = d.getCategorie().getNom();
                    boolean selectionne = false;
                    for (int cpt = 0; cpt < selectedCategories.length; cpt++) {
                        if (((String) selectedCategories[cpt]).equals(categorie)) {
                            selectionne = true;
                            break;
                        }
                    }
                    if (selectionne) {
                        _frais.add(d);
                    }
                }
            }

            DefaultPieDataset ds = new DefaultPieDataset();
            for (int cpt = 0; cpt < selectedCategories.length; cpt++) {
                double tmp = 0.0;
                ds.insertValue(cpt, (String) selectedCategories[cpt], tmp);
            }

            for (int i = 0; i < _frais.size(); i++) {
                Depense d = _frais.get(i);
                double tmp = (Double) ds.getValue(d.getCategorie().getNom()) + d.getMontant();
                ds.setValue(d.getCategorie().getNom(), tmp);
            }

            JFreeChart chart;
            chart = ChartFactory.createPieChart("Dépenses par catégories", ds, true, true, false);
            chart.getPlot().setBackgroundAlpha(0);
            ((PiePlot) chart.getPlot()).setSimpleLabels(true);
            ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
            ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

                public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                    DecimalFormat df = new DecimalFormat("#,##0.00");
                    return ((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €";
                }

                public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                    DecimalFormat df = new DecimalFormat("#,##0.00");
                    return new AttributedString(((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €");
                }
            });

            _chartPanel.setChart(chart);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtImprimer;
    private javax.swing.JButton jbtOK;
    private javax.swing.JList jlsCategories;
    private javax.swing.JRadioButton jrbBarres;
    private javax.swing.JRadioButton jrbCamembert;
    // End of variables declaration//GEN-END:variables
}
