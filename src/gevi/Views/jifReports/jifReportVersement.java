/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifPeriodReport.java
 *
 * Created on 9 avr. 2009, 17:13:13
 */
package gevi.Views.jifReports;

import gevi.Views.*;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import gevi.Model.Creneau;
import gevi.Model.Document;
import gevi.Model.Executant;
import gevi.Model.Singleton;
import gevi.Model.Versement;
import gevi.Model.Visite;
import java.awt.Dimension;
import java.awt.print.PrinterException;
import java.beans.PropertyVetoException;
import java.io.File;
import java.net.URI;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author root
 */
public class jifReportVersement extends javax.swing.JInternalFrame {

    Document _data;
    Versement _versement;

    /** Creates new form jifPeriodReport */
    public jifReportVersement(Document data, Versement v) {
        initComponents();
        this.setPreferredSize(new Dimension(640, 480));
        _data = data;
        _versement = v;

        SimpleDateFormat f = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
        String title = "Rapport du versement du " + f.format(_versement.getDate()) + " Ã  " + _versement.getExecutant().getNom() + " " + _versement.getExecutant().getPrenom();

        this.setTitle(title);

        jepHTML.setContentType("html");

        try {
            this.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        try {
            File file = genererRapportVersement();
            jepHTML.setPage(file.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }

        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtImprimer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepHTML = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jcbDisplayAstreintes = new javax.swing.JCheckBox();
        jcbDisplayVisites = new javax.swing.JCheckBox();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gevi/images/sos_cyan.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jbtOK.setText("OK");
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtImprimer.setText("Imprimer");
        jbtImprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimerActionPerformed(evt);
            }
        });
        jPanel1.add(jbtImprimer);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jepHTML.setContentType("text/html");
        jepHTML.setEditable(false);
        jScrollPane1.setViewportView(jepHTML);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jcbDisplayAstreintes.setSelected(true);
        jcbDisplayAstreintes.setText("Afficher les astreintes");
        jcbDisplayAstreintes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDisplayAstreintesActionPerformed(evt);
            }
        });
        jPanel2.add(jcbDisplayAstreintes);

        jcbDisplayVisites.setSelected(true);
        jcbDisplayVisites.setText("Afficher les visites");
        jcbDisplayVisites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDisplayVisitesActionPerformed(evt);
            }
        });
        jPanel2.add(jcbDisplayVisites);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        MainWindow.getMainWindow().closeWindow(this);
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimerActionPerformed
        try {
            jepHTML.print();
        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
}//GEN-LAST:event_jbtImprimerActionPerformed

    private void jcbDisplayVisitesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDisplayVisitesActionPerformed
        try {
            File file = genererRapportVersement();
            jepHTML.setPage(file.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jcbDisplayVisitesActionPerformed

    private void jcbDisplayAstreintesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDisplayAstreintesActionPerformed
        try {
            File file = genererRapportVersement();
            jepHTML.setPage(file.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jcbDisplayAstreintesActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtImprimer;
    private javax.swing.JButton jbtOK;
    private javax.swing.JCheckBox jcbDisplayAstreintes;
    private javax.swing.JCheckBox jcbDisplayVisites;
    private javax.swing.JEditorPane jepHTML;
    // End of variables declaration//GEN-END:variables

    public File genererRapportVersement() {
        File address = null;
        try {
            Configuration cfg = new Configuration();
            URI uri=getClass().getResource("/gevi/templates").toURI();
            if (uri.toString().contains(".jar!"))
            {
                String tmp=uri.toString();
                tmp=tmp.substring(10, tmp.indexOf(".jar!")-4);
                tmp=tmp+"templates";
                cfg.setDirectoryForTemplateLoading(new File(tmp));
            }
            else
            {
                cfg.setDirectoryForTemplateLoading(new File(uri));
            }
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            Template temp = cfg.getTemplate("versement.html");

            Map root = new HashMap();
            Document doc = Singleton.instance().getDocument();
            DecimalFormat nf = new DecimalFormat();
            nf.setMaximumFractionDigits(2);
            nf.setMinimumFractionDigits(2);
            SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
            SimpleDateFormat formatShort = new SimpleDateFormat("dd/MM/yyyy");

            root.put("nom", doc.getUtilisateur().getNom() + " " + doc.getUtilisateur().getPrenom());
            root.put("date", format.format(_versement.getDate()));

            root.put("remplacant", _versement.getExecutant().getNom() + " " + _versement.getExecutant().getPrenom());

            if (jcbDisplayAstreintes.isSelected()) {
                root.put("afficher_astreintes", "vrai");
            } else {
                root.put("afficher_astreintes", "faux");
            }

            if (jcbDisplayVisites.isSelected()) {
                root.put("afficher_visites", "vrai");
            } else {
                root.put("afficher_visites", "faux");
            }

            double somme_astreintes = 0;
            double somme_visites = 0;
            double somme_reversee = 0;

            Vector astreintes = new Vector();
            Vector visites = new Vector();

            int id = _versement.getId();
            for (int i = 0; i < _data.getCreneaux().size(); i++) {
                Creneau c = _data.getCreneaux().get(i);
                if (c.getVersementId() == id) {
                    somme_astreintes += _data.getParametres().getTarifAstreinte();
                    somme_reversee += _data.getParametres().getTarifAstreinte();
                    HashMap astreinte = new HashMap();
                    astreinte.put("date", formatShort.format(c.getDate()));
                    astreinte.put("somme", _data.getParametres().getTarifAstreinte());
                    astreinte.put("date_payement", formatShort.format(c.getDatePayementAstreinte()));
                    astreinte.put("reverse", _data.getParametres().getTarifAstreinte());
                    astreintes.add(astreinte);
                }

                for (int j = 0; j < c.getVisites().size(); j++) {
                    Visite v = c.getVisites().get(j);
                    if (v.getVersementId() == id) {
                        somme_visites += v.getTotal();
                        Map visite = new HashMap();
                        visite.put("type", v.getTypeVisite());
                        visite.put("patient", v.getNom().replaceAll("Ã©", "&eacute;").replaceAll("Ã¨", "&egrave;").replaceAll("Ã ", "&agrave;").replaceAll("Ã§", "&ccedil;"));                        
                        visite.put("depassement", v.getDepassement());
                        visite.put("total", v.getTotal());
                        visite.put("somme", v.getSommePayÃ©e());
                        visite.put("reversement", v.getSommePayÃ©e()*(1-_data.getParametres().getPrelevement()));
                        somme_reversee +=v.getSommePayÃ©e()*(1-_data.getParametres().getPrelevement());
                        visite.put("source", v.getSourcesPayement().replaceAll("Ã©", "&eacute;"));
                        if (v.getPaye()) {
                            visite.put("date_payement", v.getDatesPayement());
                        } else {
                            visite.put("date_payement", "---");
                        }

                        Vector majorations = new Vector();
/*                        if (v.getDeplacement()) {
                            majorations.add("MD");
                        }*/
                        if (v.getECG()) {
                            majorations.add("DEQP003");
                        }
                        if (v.getECGDomicile()) {
                            majorations.add("YYYY490");
                        }
                        if (v.getUrgenceVitale()) {
                            majorations.add("YYYY010");
                        }
                        if (v.getIK() > 0) {
                            majorations.add("IK " + Integer.toString(v.getIK()));
                        }
                        if (v.getIKM() > 0) {
                            majorations.add("IK " + Integer.toString(v.getIKM()));
                        }
                        if (!v.getMajorationPeriode().equals("")) {
                            majorations.add(v.getMajorationPeriode());
                        }

                        String maj = "";
                        if (majorations.size() > 0) {
                            maj = maj + (String) majorations.get(0);
                        }
                        for (int k = 1; k < majorations.size(); k++) {
                            String tmp4 = (String) majorations.get(k);
                            maj = maj + "<br>" + tmp4;
                        }
                        visite.put("majorations", maj);

                        visite.put("date",formatShort.format(c.getDate()));
                       visites.add(visite);
                    }
                }
            }

            root.put("astreintes", astreintes);
            root.put("visites", visites);
            
            root.put("somme_astreintes", somme_astreintes);
            root.put("somme_visites", somme_visites);
            root.put("somme_visites_a_reverser",somme_reversee-somme_astreintes);
            root.put("somme_reversee", somme_reversee);

            root.put("dateGeneration", formatShort.format(new Date()));
            address = File.createTempFile("versement" + format.format(_versement.getDate()), ".tmp");
            address.deleteOnExit();

            File dir = address.getParentFile();
            InputStream imgreader = getClass().getResourceAsStream("/gevi/images/entete.png");
            FileOutputStream imgwriter = new FileOutputStream(dir + "/entete.png");
            byte[] data = new byte[1024];

            while (imgreader.read(data) != -1) {
                imgwriter.write(data);
            }
            imgreader.close();
            imgwriter.close();

            Writer out = new FileWriter(address);
            temp.process(root, out);
            out.flush();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (TemplateException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (URISyntaxException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }

        return address;
    }
}
