/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifPeriodReport.java
 *
 * Created on 9 avr. 2009, 17:13:13
 */
package gevi.Views.jifReports;

import gevi.Views.*;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import gevi.Model.Creneau;
import gevi.Model.Versement;
import gevi.Model.Document;
import gevi.Model.Executant;
import gevi.Model.Singleton;
import gevi.Model.Visite;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.beans.PropertyVetoException;
import java.io.File;
import java.net.URI;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URISyntaxException;
import java.text.AttributedString;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.encoders.KeypointPNGEncoderAdapter;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.UnknownKeyException;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author root
 */
public class jifReportVersements extends javax.swing.JInternalFrame {

    Document _data;
    Vector<Versement> _versements = new Vector();
    Date _debut;
    Date _fin;

    /** Creates new form jifPeriodReport */
    public jifReportVersements(Document data, Date debut, Date fin) {
        initComponents();
        this.setPreferredSize(new Dimension(640, 480));
        _data = data;

        _debut = debut;
        _fin = fin;

        SimpleDateFormat f = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
        title = "Rapport des versements du " + f.format(debut) + " au " + f.format(fin);
        this.setTitle(title);
        jepHTML.setContentType("html");

        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("Tous les médecins");
        for (int i = 0; i < _data.getRemplacants().size(); i++) {
            model.addElement(_data.getRemplacants().get(i).getNom() + ", " + _data.getRemplacants().get(i).getPrenom());
        }
        jcbMedecins.setModel(model);

        try {
            this.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        try {
            File file = genererRapportVersements();
            jepHTML.setPage(file.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }

        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtImprimer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepHTML = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcbMedecins = new javax.swing.JComboBox();
        jcbDisplayAstreintes = new javax.swing.JCheckBox();
        jcbDisplayVisites = new javax.swing.JCheckBox();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gevi/images/sos_cyan.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jbtOK.setText("OK");
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtImprimer.setText("Imprimer");
        jbtImprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimerActionPerformed(evt);
            }
        });
        jPanel1.add(jbtImprimer);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jepHTML.setContentType("text/html");
        jepHTML.setEditable(false);
        jScrollPane1.setViewportView(jepHTML);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(2, 2, 1, 1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Médecins :");
        jPanel2.add(jLabel1);

        jcbMedecins.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbMedecins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMedecinsActionPerformed(evt);
            }
        });
        jPanel2.add(jcbMedecins);

        jcbDisplayAstreintes.setSelected(true);
        jcbDisplayAstreintes.setText("Afficher les astreintes");
        jcbDisplayAstreintes.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jcbDisplayAstreintes.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jcbDisplayAstreintes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDisplayAstreintesActionPerformed(evt);
            }
        });
        jPanel2.add(jcbDisplayAstreintes);

        jcbDisplayVisites.setSelected(true);
        jcbDisplayVisites.setText("Afficher les visites");
        jcbDisplayVisites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDisplayVisitesActionPerformed(evt);
            }
        });
        jPanel2.add(jcbDisplayVisites);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        MainWindow.getMainWindow().closeWindow(this);
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimerActionPerformed
        try {
            jepHTML.print();
        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
}//GEN-LAST:event_jbtImprimerActionPerformed

    private void jcbDisplayAstreintesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDisplayAstreintesActionPerformed
        try {
            File file = genererRapportVersements();
            jepHTML.setPage(file.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jcbDisplayAstreintesActionPerformed

    private void jcbDisplayVisitesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDisplayVisitesActionPerformed
        try {
            File file = genererRapportVersements();
            jepHTML.setPage(file.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
}//GEN-LAST:event_jcbDisplayVisitesActionPerformed

    private void jcbMedecinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMedecinsActionPerformed
        try {
            File file = genererRapportVersements();
            jepHTML.setPage(file.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jcbMedecinsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtImprimer;
    private javax.swing.JButton jbtOK;
    private javax.swing.JCheckBox jcbDisplayAstreintes;
    private javax.swing.JCheckBox jcbDisplayVisites;
    private javax.swing.JComboBox jcbMedecins;
    private javax.swing.JEditorPane jepHTML;
    // End of variables declaration//GEN-END:variables

    public File genererRapportVersements() {
        File address = null;
        try {
            Configuration cfg = new Configuration();
            URI uri=getClass().getResource("/gevi/templates").toURI();
            if (uri.toString().contains(".jar!"))
            {
                String tmp=uri.toString();
                tmp=tmp.substring(10, tmp.indexOf(".jar!")-4);
                tmp=tmp+"templates";
                cfg.setDirectoryForTemplateLoading(new File(tmp));
            }
            else
            {
                cfg.setDirectoryForTemplateLoading(new File(uri));
            }
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            Template temp = cfg.getTemplate("versements.html");

            Map root = new HashMap();
            Document doc = Singleton.instance().getDocument();
            DecimalFormat nf = new DecimalFormat();
            nf.setMaximumFractionDigits(2);
            nf.setMinimumFractionDigits(2);
            SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
            SimpleDateFormat formatShort = new SimpleDateFormat("dd/MM/yyyy");

            root.put("nom", doc.getUtilisateur().getNom() + " " + doc.getUtilisateur().getPrenom());
            HashMap dates = new HashMap();
            dates.put("debut", format.format(_debut));
            dates.put("fin", format.format(_fin));
            root.put("dates", dates);

            if (jcbMedecins.getSelectedIndex() == 0) {
                root.put("medecins", "tous les m&eacute;decins");
            } else {
                Executant e = _data.getRemplacants().get(jcbMedecins.getSelectedIndex() - 1);
                root.put("medecins", (e.getNom() + " " + e.getPrenom()).replaceAll("é", "&eacute;").replaceAll("è", "&egrave;").replaceAll("à", "&agrave;").replaceAll("ç", "&ccedil;"));
            }


            if (jcbDisplayAstreintes.isSelected()) {
                root.put("afficher_astreintes", "vrai");
            } else {
                root.put("afficher_astreintes", "faux");
            }

            if (jcbDisplayVisites.isSelected()) {
                root.put("afficher_visites", "vrai");
            } else {
                root.put("afficher_visites", "faux");
            }

            double somme_astreintes = 0;
            double somme_visites = 0;
            double somme_reversee = 0;

            Vector astreintes = new Vector();
            Vector visites = new Vector();

            Vector ids = new Vector();
            Vector versements = new Vector();
            _versements.clear();
            Vector dateVers = new Vector();
            for (int i = 0; i < _data.getVersements().size(); i++) {
                Versement vers = _data.getVersements().get(i);
                if ((vers.getDate().before(_fin) && vers.getDate().after(_debut)) || vers.getDate().equals(_fin) || vers.getDate().equals(_debut)) {
                    if (jcbMedecins.getSelectedIndex() == 0) {
                        ids.add(vers.getId());
                        HashMap versement = new HashMap();
                        versement.put("medecin", vers.getExecutant().getNom() + ", " + vers.getExecutant().getPrenom());
                        versement.put("date", formatShort.format(vers.getDate()));
                        versement.put("montant", vers.getMontant());
                        versements.add(versement);
                        _versements.add(vers);
                        dateVers.add(vers.getDate());

                    } else {
                        if (vers.getExecutant().equals(_data.getRemplacants().get(jcbMedecins.getSelectedIndex() - 1))) {
                            ids.add(vers.getId());
                            HashMap versement = new HashMap();
                            versement.put("medecin", vers.getExecutant().getNom() + ", " + vers.getExecutant().getPrenom());
                            versement.put("date", formatShort.format(vers.getDate()));
                            versement.put("montant", vers.getMontant());
                            versements.add(versement);
                            _versements.add(vers);
                            dateVers.add(vers.getDate());
                        }
                    }
                }
            }
            root.put("versements", versements);

            for (int i = 0; i < _data.getCreneaux().size(); i++) {
                Creneau c = _data.getCreneaux().get(i);
                boolean found = false;
                Date date_tmp = null;

                for (int cpt = 0; cpt < ids.size(); cpt++) {
                    if (((Integer) ids.get(cpt)) == c.getVersementId()) {
                        found = true;
                        date_tmp = (Date) dateVers.get(cpt);
                        break;
                    }
                }

                if (found) {
                    somme_astreintes += _data.getParametres().getTarifAstreinte();
                    somme_reversee += _data.getParametres().getTarifAstreinte();
                    HashMap astreinte = new HashMap();
                    astreinte.put("medecin", c.getExecutant().getNom() + ", " + c.getExecutant().getPrenom());
                    astreinte.put("date", formatShort.format(c.getDate()));
                    astreinte.put("somme", _data.getParametres().getTarifAstreinte());
                    astreinte.put("date_payement", formatShort.format(c.getDatePayementAstreinte()));
                    astreinte.put("reverse", _data.getParametres().getTarifAstreinte());
                    astreinte.put("versement", formatShort.format(date_tmp));
                    astreintes.add(astreinte);
                }


                for (int j = 0; j < c.getVisites().size(); j++) {
                    Visite v = c.getVisites().get(j);
                    found = false;
                    for (int cpt = 0; cpt < ids.size(); cpt++) {
                        if (((Integer) ids.get(cpt)) == v.getVersementId()) {
                            found = true;
                            date_tmp = (Date) dateVers.get(cpt);
                            break;
                        }
                    }
                    if (found) {
                        somme_visites += v.getTotal();
                        Map visite = new HashMap();
                        visite.put("medecin", c.getExecutant().getNom() + ", " + c.getExecutant().getPrenom());
                        visite.put("date_reversement", formatShort.format(date_tmp));
                        visite.put("patient", v.getNom().replaceAll("é", "&eacute;").replaceAll("è", "&egrave;").replaceAll("à", "&agrave;").replaceAll("ç", "&ccedil;"));
                        visite.put("total", v.getTotal());
                        visite.put("somme", v.getSommePayée());
                        visite.put("reversement", v.getSommePayée() * (1 - _data.getParametres().getPrelevement()));
                        somme_reversee += v.getTotal() * (1 - _data.getParametres().getPrelevement());
                        visite.put("source", v.getSourcesPayement().replaceAll("é", "&eacute;"));
                        if (v.getSommePayée()>0) {
                            visite.put("date_payement", v.getDatesPayement());
                        } else {
                            visite.put("date_payement", "---");
                        }
                        visite.put("date", formatShort.format(c.getDate()));
                        visites.add(visite);
                    }
                }
            }

            root.put("astreintes", astreintes);
            root.put("visites", visites);

            root.put("somme_astreintes", somme_astreintes);
            root.put("somme_visites", somme_visites);
            root.put("somme_visites_a_reverser", somme_reversee - somme_astreintes);
            root.put("somme_reversee", somme_reversee);

            root.put("dateGeneration", formatShort.format(new Date()));
            address = File.createTempFile("versements" + format.format(_debut) + "-" + format.format(_fin), ".tmp");
            address.deleteOnExit();

            File dir = address.getParentFile();

            KeypointPNGEncoderAdapter encoder = new KeypointPNGEncoderAdapter();
            encoder.setEncodingAlpha(true);

/*            if (jcbBarres.isSelected()) {
                root.put("display_graph_bar", 1);
                FileOutputStream imgwriter2 = new FileOutputStream(dir + "/bar.png");
                encoder.encode(getChartBar().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                imgwriter2.close();
            } else {*/
                root.put("display_graph_bar", 0);
            /*}

            if (jcbPie.isSelected()) {
                root.put("display_graph_pie", 1);
                FileOutputStream imgwriter2 = new FileOutputStream(dir + "/pie.png");
                encoder.encode(getChartPie().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                imgwriter2.close();
            } else {*/
                root.put("display_graph_pie", 0);
            //}

            InputStream imgreader = getClass().getResourceAsStream("/gevi/images/entete.png");
            FileOutputStream imgwriter = new FileOutputStream(dir + "/entete.png");
            byte[] data = new byte[1024];

            while (imgreader.read(data) != -1) {
                imgwriter.write(data);
            }
            imgreader.close();
            imgwriter.close();

            Writer out = new FileWriter(address);
            temp.process(root, out);
            out.flush();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (TemplateException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (URISyntaxException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }

        return address;
    }

    private JFreeChart getChartBar() {

        DefaultCategoryDataset ds = new DefaultCategoryDataset();
        for (int cpt = 0; cpt < _versements.size(); cpt++) {
            double tmp = 0.0;
            Versement v = _versements.get(cpt);
            try {
                ds.incrementValue(v.getMontant(), "", v.getExecutant().getNom() + " " + v.getExecutant().getPrenom());
            } catch (UnknownKeyException e) {
                ds.addValue(v.getMontant(), "", v.getExecutant().getNom() + " " + v.getExecutant().getPrenom());
            }
        }

        JFreeChart chart;
        chart = ChartFactory.createBarChart("Versements par remplaçant", "Remplaçant", "Montant", ds, PlotOrientation.HORIZONTAL, false, false, false);

        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.blue,
                0.0f, 0.0f, new Color(0, 0, 64));
        renderer.setSeriesPaint(0, gp0);
        ItemLabelPosition pos = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setSeriesItemLabelsVisible(0, true);
        renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

            public String generateRowLabel(CategoryDataset arg0, int arg1) {
                DecimalFormat df = new DecimalFormat("#,##0.00");
                return df.format((Double) arg0.getValue("", arg0.getColumnKey(arg1))) + " €";
            }

            public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                DecimalFormat df = new DecimalFormat("#,##0.00");
                return df.format((Double) arg0.getValue("", arg0.getColumnKey(arg1))) + " €";
            }

            public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                DecimalFormat df = new DecimalFormat("#,##0.00");
                return df.format((Double) arg0.getValue(arg1, arg2)) + " €";
            }
        });
        return chart;
    }

    private JFreeChart getChartPie() {

        DefaultPieDataset ds = new DefaultPieDataset();
        for (int cpt = 0; cpt < _versements.size(); cpt++) {
            Versement v = _versements.get(cpt);
            try {
                double tmp = (Double) ds.getValue(v.getExecutant().getNom() + " " + v.getExecutant().getPrenom());
                ds.setValue(v.getExecutant().getNom() + " " + v.getExecutant().getPrenom(), v.getMontant() + tmp);
            } catch (UnknownKeyException e) {
                ds.insertValue(ds.getKeys().size(), v.getExecutant().getNom() + " " + v.getExecutant().getPrenom(), v.getMontant());
            }
        }

        JFreeChart chart;
        chart = ChartFactory.createPieChart("Versement par remplaçant", ds, true, true, false);
        chart.getPlot().setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

            public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0.00");
                return ((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €";
            }

            public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0.00");
                return new AttributedString(((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €");
            }
        });
        return chart;
    }
}
