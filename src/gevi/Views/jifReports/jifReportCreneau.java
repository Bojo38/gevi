/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifPeriodReport.java
 *
 * Created on 9 avr. 2009, 17:13:13
 */
package gevi.Views.jifReports;

import gevi.Views.*;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import gevi.Model.Creneau;
import gevi.Model.Document;
import gevi.Model.Executant;
import gevi.Model.Singleton;
import gevi.Model.Visite;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.beans.PropertyVetoException;
import java.io.File;
import java.net.URI;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URISyntaxException;
import java.text.AttributedString;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.encoders.KeypointPNGEncoderAdapter;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author root
 */
public class jifReportCreneau extends javax.swing.JInternalFrame {

    Document _data;
    Creneau _creneau;

    /** Creates new form jifPeriodReport */
    public jifReportCreneau(Document data, Creneau creneau) {
        initComponents();
        this.setPreferredSize(new Dimension(640, 480));
        _data = data;
        _creneau = creneau;

        SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
        String titre = "Créneau du " + format.format(_creneau.getDate()) + " par " + _creneau.getExecutant().getNom() + " " + _creneau.getExecutant().getPrenom();
        this.setTitle(titre);

        try {
            jepHTML.setContentType("html");
            File f = genererRapportCreneau();
            jepHTML.setPage(f.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }

        try {
            this.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtImprimer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepHTML = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gevi/images/sos_jaune.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jbtOK.setText("OK");
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtImprimer.setText("Imprimer");
        jbtImprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimerActionPerformed(evt);
            }
        });
        jPanel1.add(jbtImprimer);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jepHTML.setContentType("text/html");
        jepHTML.setEditable(false);
        jScrollPane1.setViewportView(jepHTML);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2, 1, 1));
        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        MainWindow.getMainWindow().closeWindow(this);
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimerActionPerformed
        try {
            jepHTML.print();

        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
}//GEN-LAST:event_jbtImprimerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtImprimer;
    private javax.swing.JButton jbtOK;
    private javax.swing.JEditorPane jepHTML;
    // End of variables declaration//GEN-END:variables

    public File genererRapportCreneau() {
        File address = null;
        try {
            Configuration cfg = new Configuration();
            URI uri=getClass().getResource("/gevi/templates").toURI();
            if (uri.toString().contains(".jar!"))
            {
                String tmp=uri.toString();
                tmp=tmp.substring(10, tmp.indexOf(".jar!")-4);
                tmp=tmp+"templates";
                cfg.setDirectoryForTemplateLoading(new File(tmp));
            }
            else
            {
                cfg.setDirectoryForTemplateLoading(new File(uri));
            }
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            Template temp = cfg.getTemplate("creneau.html");

            Map root = new HashMap();
            Document doc = Singleton.instance().getDocument();
            DecimalFormat nf = new DecimalFormat();
            nf.setMaximumFractionDigits(2);
            nf.setMinimumFractionDigits(2);
            SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
            SimpleDateFormat formatShort = new SimpleDateFormat("dd/MM/yyyy");
            root.put("nom", doc.getUtilisateur().getNom() + " " + doc.getUtilisateur().getPrenom());


            root.put("date", format.format(_creneau.getDate()));

            root.put("nombre_visites", Integer.toString(_creneau.getVisites().size()));
            root.put("somme_totale", nf.format(_creneau.getTotal()));
            root.put("somme_encaissee", nf.format(_creneau.getTotalPaye()));
            root.put("somme_impayee", nf.format(_creneau.getTotalImpaye()));
            if (_creneau.getAstreinte()) {
                root.put("astreinte", nf.format(_data.getParametres().getTarifAstreinte()));
                if (_creneau.getAstreintePayee()) {
                    root.put("astreinte_payee", formatShort.format(_creneau.getDatePayementAstreinte()));
                } else {
                    root.put("astreinte_payee", "---");
                }
            } else {
                root.put("astreinte", "---");
                root.put("astreinte_payee", "---");
            }

            Vector parVisite = new Vector();

            for (int cpt = 0; cpt < _creneau.getVisites().size(); cpt++) {
                Visite v = _creneau.getVisites().get(cpt);

                Map visite = new HashMap();
                visite.put("type", v.getTypeVisite());
                visite.put("patient", v.getNom());
                visite.put("depassement", Double.toString(v.getDepassement()));
                visite.put("total", nf.format(v.getTotal()));
                visite.put("somme", nf.format(v.getSommePayée()));
                visite.put("source", v.getSourcesPayement());
                if (v.getSommePayée()>0) {
                    visite.put("paye", v.getDatesPayement());
                } else {
                    visite.put("paye", "---");
                }

                Vector majorations = new Vector();
/*                if (v.getDeplacement()) {
                    majorations.add("MD");
                }*/
                if (v.getECG()) {
                    majorations.add("DEQP003");
                }
                if (v.getECGDomicile()) {
                    majorations.add("YYYY490");
                }
                if (v.getUrgenceVitale()) {
                    majorations.add("YYYY010");
                }
                if (v.getIK() > 0) {
                    majorations.add("IK " + Integer.toString(v.getIK()));
                }
                if (v.getIKM() > 0) {
                    majorations.add("IK " + Integer.toString(v.getIKM()));
                }
                if (!v.getMajorationPeriode().equals("")) {
                    majorations.add(v.getMajorationPeriode());
                }

                String maj = "";
                if (majorations.size() > 0) {
                    maj = maj + (String) majorations.get(0);
                }
                for (int i = 1; i < majorations.size(); i++) {
                    String tmp = (String) majorations.get(i);
                    maj = maj + "<br>" + tmp;
                }
                visite.put("majorations", maj);

                parVisite.add(visite);

            }
            root.put("visites", parVisite);
            root.put("dateGeneration", formatShort.format(new Date()));

            address = File.createTempFile("creneau" + format.format(_creneau.getDate()), ".tmp");
            address.deleteOnExit();

            File dir = address.getParentFile();

/*            if (jcbDisplayGraphBar.isSelected()) {

                KeypointPNGEncoderAdapter encoder = new KeypointPNGEncoderAdapter();
                encoder.setEncodingAlpha(true);

                root.put("display_graph_type_pie", 1);
                FileOutputStream imgwriter2 = new FileOutputStream(dir + "/typepie.png");
                encoder.encode(getTypeChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                imgwriter2.close();

                root.put("display_graph_source_pie", 1);
                FileOutputStream imgwriter4 = new FileOutputStream(dir + "/sourcepie.png");
                encoder.encode(getSourceChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter4);
                imgwriter4.close();

                root.put("display_graph_paye_pie", 1);
                FileOutputStream imgwriter3 = new FileOutputStream(dir + "/payepie.png");
                encoder.encode(getImpayeChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter3);
                imgwriter3.close();

            } else {*/
                root.put("display_graph_type_pie", 0);
                root.put("display_graph_source_pie", 0);
                root.put("display_graph_paye_pie", 0);
            /*}

            if (jcbDisplayGraphPie.isSelected()) {

                KeypointPNGEncoderAdapter encoder = new KeypointPNGEncoderAdapter();
                encoder.setEncodingAlpha(true);


                root.put("display_graph_type_bar", 1);
                FileOutputStream imgwriter2 = new FileOutputStream(dir + "/typebar.png");
                encoder.encode(getTypeChartBar().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                imgwriter2.close();
                root.put("display_graph_source_bar", 1);
                FileOutputStream imgwriter3 = new FileOutputStream(dir + "/sourcebar.png");
                encoder.encode(getSourceChartBar().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter3);
                imgwriter3.close();
                root.put("display_graph_paye_bar", 1);
                FileOutputStream imgwriter4 = new FileOutputStream(dir + "/payebar.png");
                encoder.encode(getImpayeChartBar().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter4);
                imgwriter4.close();


            } else {*/
                root.put("display_graph_type_bar", 0);
                root.put("display_graph_source_bar", 0);
                root.put("display_graph_paye_bar", 0);
            //}

            InputStream imgreader = getClass().getResourceAsStream("/gevi/images/entete.png");
            FileOutputStream imgwriter = new FileOutputStream(dir + "/entete.png");
            byte[] data = new byte[1024];
            int nb = 0;
            while (imgreader.read(data) != -1) {
                imgwriter.write(data);
            }
            imgreader.close();
            imgwriter.close();

            Writer out = new FileWriter(address);
            temp.process(root, out);
            out.flush();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (TemplateException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (URISyntaxException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }

        return address;
    }

    /*JFreeChart getImpayeChart() {
        DefaultPieDataset ds = new DefaultPieDataset();

        ds.insertValue(0, "Payé", 0.0);
        ds.insertValue(1, "Impayé", 0.0);

        for (int i = 0; i < _creneau.getVisites().size(); i++) {
            Visite v = _creneau.getVisites().get(i);
            double tmp = (Double) ds.getValue("Payé");
            ds.setValue("Payé", tmp + v.getSommePayée());
            tmp = (Double) ds.getValue("Impayé");
            ds.setValue("Impayé", tmp + v.getTotal()-v.getSommePayée());
        }

        JFreeChart chart;
        chart = ChartFactory.createPieChart("Répartition payés/impayés", ds, true, true, false);
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        ((PiePlot) chart.getPlot()).setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

            public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0.00");
                return ((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €";
            }

            public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0.00");
                return new AttributedString(((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €");
            }
        });
        return chart;
    }*/

    /*JFreeChart getSourceChart() {
        DefaultPieDataset ds = new DefaultPieDataset();

        for (int i = 0; i < _creneau.getVisites().size(); i++) {
            Visite v = _creneau.getVisites().get(i);
            String nom = v.getSourcePayement();

            try {
                double tmp = (Double) ds.getValue(nom);
                ds.setValue(nom, tmp + v.getTotal());
            } catch (org.jfree.data.UnknownKeyException ex) {
                ds.insertValue(ds.getKeys().size(), nom, v.getTotal());
            }

        }

        JFreeChart chart;
        chart = ChartFactory.createPieChart("Répartition par source", ds, true, true, false);
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        ((PiePlot) chart.getPlot()).setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

            public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0.00");
                return ((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €";
            }

            public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0.00");
                return new AttributedString(((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €");
            }
        });
        return chart;
    }*/

    /*JFreeChart getTypeChart() {
        DefaultPieDataset ds = new DefaultPieDataset();

        for (int i = 0; i < _creneau.getVisites().size(); i++) {
            Visite v = _creneau.getVisites().get(i);
            String nom = v.getTypeVisite();

            try {
                double tmp = (Double) ds.getValue(nom);
                ds.setValue(nom, tmp + 1);
            } catch (org.jfree.data.UnknownKeyException ex) {
                double tmp = 1;
                ds.insertValue(ds.getKeys().size(), nom, tmp);
            }
        }

        JFreeChart chart;
        chart = ChartFactory.createPieChart("Répartition par type", ds, true, true, false);
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        ((PiePlot) chart.getPlot()).setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

            public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                return ((String) arg1) + ": " + ((Double) arg0.getValue(arg1)).toString();
            }

            public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                return new AttributedString(((String) arg1) + ": " + ((Double) arg0.getValue(arg1)).toString());
            }
        });
        return chart;
    }*/

   /* JFreeChart getImpayeChartBar() {
        DefaultCategoryDataset ds = new DefaultCategoryDataset();

        ds.addValue(0.0, "", "Payé");
        ds.addValue(0.0, "", "Impayé");

        for (int i = 0; i < _creneau.getVisites().size(); i++) {
            Visite v = _creneau.getVisites().get(i);

                ds.incrementValue(v.getSommePayée(), "", "Payé");

                ds.incrementValue(v.getTotal()-v.getSommePayée(), "", "Impayé");

        }

        JFreeChart chart;
        chart = ChartFactory.createBarChart("Repartition vistes payées/impayées", "", "Montant", ds, PlotOrientation.HORIZONTAL, false, false, false);

        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.red,
                0.0f, 0.0f, new Color(64, 0, 0));
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesItemLabelsVisible(0, true);
        ItemLabelPosition pos = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

            public String generateRowLabel(CategoryDataset arg0, int arg1) {
                return ((Double) arg0.getValue("", arg0.getColumnKey(arg1))).toString() + " €";
            }

            public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                return ((Double) arg0.getValue("", arg0.getColumnKey(arg1))).toString() + " €";
            }

            public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                return ((Double) arg0.getValue(arg1, arg2)).toString() + " €";
            }
        });
        return chart;
    }*/

    /*JFreeChart getSourceChartBar() {
        DefaultCategoryDataset ds = new DefaultCategoryDataset();

        for (int i = 0; i < _creneau.getVisites().size(); i++) {
            Visite v = _creneau.getVisites().get(i);
            String nom = v.getSourcePayement();

            try {
                double tmp = (Double) ds.getValue("", nom);
                ds.incrementValue(v.getTotal(), "", nom);
            } catch (org.jfree.data.UnknownKeyException ex) {
                ds.addValue(v.getTotal(), "", nom);
            }

        }

        JFreeChart chart;
        chart = ChartFactory.createBarChart("Sources de payement", "Source", "Montant", ds, PlotOrientation.HORIZONTAL, false, false, false);

        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.green,
                0.0f, 0.0f, new Color(0, 64, 0));
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesItemLabelsVisible(0, true);
        ItemLabelPosition pos = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

            public String generateRowLabel(CategoryDataset arg0, int arg1) {
                return ((Double) arg0.getValue("", arg0.getColumnKey(arg1))).toString() + " €";
            }

            public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                return ((Double) arg0.getValue("", arg0.getColumnKey(arg1))).toString() + " €";
            }

            public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                return ((Double) arg0.getValue(arg1, arg2)).toString() + " €";
            }
        });
        return chart;
    }*/

    /*JFreeChart getTypeChartBar() {
        DefaultCategoryDataset ds = new DefaultCategoryDataset();

        for (int i = 0; i < _creneau.getVisites().size(); i++) {
            Visite v = _creneau.getVisites().get(i);
            String nom = v.getTypeVisite();

            try {
                double tmp = (Double) ds.getValue("", nom);
                ds.incrementValue(1, "", nom);
            } catch (org.jfree.data.UnknownKeyException ex) {
                double tmp = 1;
                ds.addValue(tmp, "", nom);
            }
        }

        JFreeChart chart;
        chart = ChartFactory.createBarChart("Visites par type", "Type", "Nombre", ds, PlotOrientation.HORIZONTAL, false, false, false);

        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, new Color(255, 255, 0),
                0.0f, 0.0f, new Color(64, 64, 0));
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesItemLabelsVisible(0, true);
        ItemLabelPosition pos = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

            public String generateRowLabel(CategoryDataset arg0, int arg1) {
                return ((Double) arg0.getValue("", arg0.getColumnKey(arg1))).toString().replace(".0", "");
            }

            public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                return ((Double) arg0.getValue("", arg0.getColumnKey(arg1))).toString().replace(".0", "");
            }

            public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                return ((Double) arg0.getValue(arg1, arg2)).toString().replace(".0", "");
            }
        });
        return chart;
    }*/
}
