/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifPeriodReport.java
 *
 * Created on 9 avr. 2009, 17:13:13
 */
package gevi.Views.jifReports;

import gevi.Views.*;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import gevi.Model.Creneau;
import gevi.Model.Document;
import gevi.Model.Executant;
import gevi.Model.Singleton;
import gevi.Model.Visite;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.beans.PropertyVetoException;
import java.io.File;
import java.net.URI;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URISyntaxException;
import java.text.AttributedString;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.encoders.KeypointPNGEncoderAdapter;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author root
 */
public class jifReportVisites extends javax.swing.JInternalFrame {

    Document _data;
    Vector<Visite> _visites;
    Vector<Executant> _medecins;
    Date _debut;
    Date _fin;

    /** Creates new form jifPeriodReport */
    public jifReportVisites(Document data, Date debut, Date fin) {
        initComponents();
        this.setPreferredSize(new Dimension(640, 480));
        _data = data;
        _visites = new Vector();
        _medecins = new Vector();
        _debut = debut;
        _fin = fin;
        SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
        String titre = "Visites du " + format.format(_debut) + " au " + format.format(_fin);

        this.setTitle(titre);
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("Tous");
        model.addElement(_data.getUtilisateur().getNom() + ", " + _data.getUtilisateur().getPrenom());
        for (int i = 0; i < _data.getRemplacants().size(); i++) {
            Executant e = _data.getRemplacants().get(i);
            model.addElement(e.getNom() + ", " + e.getPrenom() + "(Remplaçant)");
        }
        jcbMedecins.setModel(model);

        jepHTML.setContentType("html");

        try {
            this.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        refreshVisites();

        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtImprimer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepHTML = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlbMajration1 = new javax.swing.JLabel();
        jcbType = new javax.swing.JComboBox();
        jlbMoyenPayement = new javax.swing.JLabel();
        jcbPaye = new javax.swing.JComboBox();
        jlbSource = new javax.swing.JLabel();
        jcbSource = new javax.swing.JComboBox();
        jlbSource1 = new javax.swing.JLabel();
        jcbMedecins = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gevi/images/sos_vert.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jbtOK.setText("OK");
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtImprimer.setText("Imprimer");
        jbtImprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimerActionPerformed(evt);
            }
        });
        jPanel1.add(jbtImprimer);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jepHTML.setContentType("text/html");
        jepHTML.setEditable(false);
        jScrollPane1.setViewportView(jepHTML);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel4.setLayout(new java.awt.GridLayout(2, 0));

        jlbMajration1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbMajration1.setText("Type de visite :");
        jPanel4.add(jlbMajration1);

        jcbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tous", "C - Consultation", "V - Visite", "GAV - Garde à vue", "IPM - Ivresse publique manifeste" }));
        jcbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTypeActionPerformed(evt);
            }
        });
        jPanel4.add(jcbType);

        jlbMoyenPayement.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbMoyenPayement.setText("Payement effectué :");
        jPanel4.add(jlbMoyenPayement);

        jcbPaye.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tous", "Payées", "Non payées" }));
        jcbPaye.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPayeActionPerformed(evt);
            }
        });
        jPanel4.add(jcbPaye);

        jlbSource.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbSource.setText("Source du payement :");
        jPanel4.add(jlbSource);

        jcbSource.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tous", "Particulier", "Maison de retraite", "Sécurité sociale - CMU", "Sécurité sociale - 100%", "Mairie", "Tribunal de grande instance", "Tutelle" }));
        jcbSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSourceActionPerformed(evt);
            }
        });
        jPanel4.add(jcbSource);

        jlbSource1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbSource1.setText("Medecins:");
        jPanel4.add(jlbSource1);

        jcbMedecins.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tous" }));
        jcbMedecins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMedecinsActionPerformed(evt);
            }
        });
        jPanel4.add(jcbMedecins);

        jPanel2.add(jPanel4, java.awt.BorderLayout.PAGE_START);
        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        MainWindow.getMainWindow().closeWindow(this);
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimerActionPerformed
        try {
            jepHTML.print();
        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
}//GEN-LAST:event_jbtImprimerActionPerformed

    private void jcbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTypeActionPerformed
        refreshVisites();
}//GEN-LAST:event_jcbTypeActionPerformed

    private void jcbPayeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPayeActionPerformed
        refreshVisites();
}//GEN-LAST:event_jcbPayeActionPerformed

    private void jcbSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSourceActionPerformed
        refreshVisites();
}//GEN-LAST:event_jcbSourceActionPerformed

    private void jcbMedecinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMedecinsActionPerformed
        refreshVisites();
}//GEN-LAST:event_jcbMedecinsActionPerformed

    private void refreshVisites() {
        _visites.clear();
        _medecins.clear();
        Vector<Creneau> cren = Singleton.instance().getDocument().getCreneaux();

        int selectionMedecin = jcbMedecins.getSelectedIndex();
        Executant executant = null;
        if (selectionMedecin == 0) {
        } else {
            if (selectionMedecin == 1) {
                executant = _data.getUtilisateur();
            } else {
                executant = _data.getRemplacants().get(selectionMedecin - 2);
            }
        }

        for (int i = 0; i < cren.size(); i++) {
            Creneau c = cren.get(i);
            Vector visites = c.getVisites();
            Date d = c.getDate();
            if ((d.before(_fin) && d.after(_debut)) || (d.equals(_fin)) || (d.equals(_debut))) {
                if (c.getExecutant().equals(executant) || (executant == null)) {
                    for (int j = 0; j < visites.size(); j++) {
                        Visite v = (Visite) visites.get(j);
                        String type = v.getTypeVisite();
                        String selectedType = (String) jcbType.getSelectedItem();

                        if ((type.equals("C") && (selectedType.equals("C - Consultation"))) ||
                                (type.equals("V") && (selectedType.equals("V - Visite"))) ||
                                (type.equals("GAV") && (selectedType.equals("GAV - Garde à vue"))) ||
                                (type.equals("IPM") && (selectedType.equals("IPM - Ivresse publique manifeste"))) ||
                                (selectedType.equals("Tous"))) {

                            int selectedPaye = jcbPaye.getSelectedIndex();
                            if ((v.getPaye() && (selectedPaye == 1)) ||
                                    (!v.getPaye() && (selectedPaye == 2)) ||
                                    (selectedPaye == 0)) {
                                String selectedSource = (String) jcbSource.getSelectedItem();
                                if (selectedSource.equals("Tous") ||
                                        selectedSource.equals(v.getSourcesPayement())) {
                                    _medecins.add(c.getExecutant());
                                    _visites.add(v);

                                }
                            }

                        }
                    }
                }
            }
        }

        try {
            File f = genererRapportVisites();
            jepHTML.setPage(f.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtImprimer;
    private javax.swing.JButton jbtOK;
    private javax.swing.JComboBox jcbMedecins;
    private javax.swing.JComboBox jcbPaye;
    private javax.swing.JComboBox jcbSource;
    private javax.swing.JComboBox jcbType;
    private javax.swing.JEditorPane jepHTML;
    private javax.swing.JLabel jlbMajration1;
    private javax.swing.JLabel jlbMoyenPayement;
    private javax.swing.JLabel jlbSource;
    private javax.swing.JLabel jlbSource1;
    // End of variables declaration//GEN-END:variables

    public File genererRapportVisites() {
        File address = null;
        try {
            Configuration cfg = new Configuration();
            URI uri=getClass().getResource("/gevi/templates").toURI();
            if (uri.toString().contains(".jar!"))
            {
                String tmp=uri.toString();
                tmp=tmp.substring(10, tmp.indexOf(".jar!")-4);
                tmp=tmp+"templates";
                cfg.setDirectoryForTemplateLoading(new File(tmp));
            }
            else
            {
                cfg.setDirectoryForTemplateLoading(new File(uri));
            }
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            Template temp = cfg.getTemplate("visites.html");

            Map root = new HashMap();
            Document doc = Singleton.instance().getDocument();
            DecimalFormat nf = new DecimalFormat();
            nf.setMaximumFractionDigits(2);
            nf.setMinimumFractionDigits(2);
            SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
            SimpleDateFormat formatShort = new SimpleDateFormat("dd/MM/yyyy");

            root.put("nom", doc.getUtilisateur().getNom() + " " + doc.getUtilisateur().getPrenom());

            HashMap dates = new HashMap();
            dates.put("debut", formatShort.format(_debut));
            dates.put("fin", formatShort.format(_fin));
            root.put("dates", dates);
            root.put("nombre_visites", Integer.toString(_visites.size()));

            int nb = jcbMedecins.getSelectedIndex();
            if (nb == 0) {
                root.put("medecins", "Tous les m&eacute;decins");
            } else {
                root.put("medecins", (String) jcbMedecins.getSelectedItem());
            }

            String tmp = (String) jcbPaye.getSelectedItem();
            if (tmp.equals("Tous")) {
                root.put("payees", "Visites pay&eacute;es et impay&eacute;es");
            } else {
                if (tmp.equals("Payées")) {
                    root.put("payees", "Visites pay&eacute;es");
                } else {
                    root.put("payees", "Visites impay&eacute;es");
                }
            }

            String tmp2 = (String) jcbSource.getSelectedItem();
            if (tmp2.equals("Tous")) {
                root.put("sources", "Toutes les sources de payement");
            } else {
                root.put("sources", "Pay&eacute; par :" + tmp2.replaceAll("é", "&eacute;"));
            }

            String tmp3 = (String) jcbType.getSelectedItem();
            if (tmp3.equals("Tous")) {
                root.put("types", "Tous les types");
            } else {
                root.put("types", tmp3.replaceAll("é", "&eacute;").replace("à", "&agrave;"));
            }

            double somme_totale = 0;
            double somme_payee = 0;
            double somme_impayee = 0;

            Vector parVisite = new Vector();
            for (int cpt = 0; cpt < _visites.size(); cpt++) {
                Visite v = (Visite) _visites.get(cpt);

                Map visite = new HashMap();
                visite.put("type", v.getTypeVisite());
                visite.put("patient", v.getNom().replaceAll("é", "&eacute;").replaceAll("è", "&egrave;").replaceAll("à", "&agrave;").replaceAll("ç", "&ccedil;"));
                visite.put("details", v.getDescription().replaceAll("é", "&eacute;").replaceAll("è", "&egrave;").replaceAll("à", "&agrave;").replaceAll("ç", "&ccedil;"));
                visite.put("depassement", Double.toString(v.getDepassement()));
                visite.put("total", nf.format(v.getTotal()));
                visite.put("somme", nf.format(v.getSommePayée()));
                visite.put("source", v.getSourcesPayement().replaceAll("é", "&eacute;"));
                if (v.getSommePayée()>0) {
                    visite.put("paye", v.getDatesPayement());
                } else {
                    visite.put("paye", "---");
                }

                Vector majorations = new Vector();
/*                if (v.getDeplacement()) {
                    majorations.add("MD");
                }*/
                if (v.getECG()) {
                    majorations.add("DEQP003");
                }
                if (v.getECGDomicile()) {
                    majorations.add("YYYY490");
                }
                if (v.getUrgenceVitale()) {
                    majorations.add("YYYY010");
                }
                if (v.getIK() > 0) {
                    majorations.add("IK " + Integer.toString(v.getIK()));
                }
                if (v.getIKM() > 0) {
                    majorations.add("IK " + Integer.toString(v.getIKM()));
                }
                if (!v.getMajorationPeriode().equals("")) {
                    majorations.add(v.getMajorationPeriode());
                }

                String maj = "";
                if (majorations.size() > 0) {
                    maj = maj + (String) majorations.get(0);
                }
                for (int i = 1; i < majorations.size(); i++) {
                    String tmp4 = (String) majorations.get(i);
                    maj = maj + "<br>" + tmp4;
                }
                visite.put("majorations", maj);

                somme_totale += v.getTotal();
                somme_payee += v.getSommePayée();
                somme_impayee += v.getTotal()-v.getSommePayée();

                visite.put("medecin", _medecins.get(cpt).getNom() + ", " + _medecins.get(cpt).getPrenom());
                parVisite.add(visite);
            }
            root.put("visites", parVisite);
            root.put("somme_totale", somme_totale);
            root.put("somme_encaissee", somme_payee);
            root.put("somme_impayee", somme_impayee);

            root.put("dateGeneration", formatShort.format(new Date()));
            address = File.createTempFile("visites" + format.format(_debut) + "-" + format.format(_fin), ".tmp");
            address.deleteOnExit();

            File dir = address.getParentFile();

/*            if (jcbDisplayGraph1.isSelected()) {

                KeypointPNGEncoderAdapter encoder = new KeypointPNGEncoderAdapter();
                encoder.setEncodingAlpha(true);

                if (jcbType.getSelectedIndex() == 0) {
                    root.put("display_graph_type_pie", 1);
                    FileOutputStream imgwriter2 = new FileOutputStream(dir + "/typepie.png");
                    encoder.encode(getTypeChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                    imgwriter2.close();

                } else {
                    root.put("display_graph_type_pie", 0);
                }

                if (jcbMedecins.getSelectedIndex() == 0) {
                    root.put("display_graph_exec_pie", 1);
                    FileOutputStream imgwriter2 = new FileOutputStream(dir + "/execpie.png");
                    encoder.encode(getExecutantChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                    imgwriter2.close();

                } else {
                    root.put("display_graph_exec_pie", 0);
                }

                if (jcbSource.getSelectedIndex() == 0) {
                    root.put("display_graph_source_pie", 1);
                    FileOutputStream imgwriter2 = new FileOutputStream(dir + "/sourcepie.png");
                    encoder.encode(getSourceChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                    imgwriter2.close();

                } else {
                    root.put("display_graph_source_pie", 0);
               }

                if (jcbPaye.getSelectedIndex() == 0) {
                    root.put("display_graph_paye_pie", 1);
                    FileOutputStream imgwriter2 = new FileOutputStream(dir + "/payepie.png");
                    encoder.encode(getImpayeChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                    imgwriter2.close();

                } else {
                    root.put("display_graph_paye_pie", 0);
                }


            } else {*/
                root.put("display_graph_type_pie", 0);
                root.put("display_graph_exec_pie", 0);
                root.put("display_graph_source_pie", 0);
                root.put("display_graph_paye_pie", 0);
           /* }

            if (jcbDisplayGraph.isSelected()) {

                KeypointPNGEncoderAdapter encoder = new KeypointPNGEncoderAdapter();
                encoder.setEncodingAlpha(true);

                if (jcbType.getSelectedIndex() == 0) {
                    root.put("display_graph_type_bar", 1);
                    FileOutputStream imgwriter2 = new FileOutputStream(dir + "/typebar.png");
                    encoder.encode(getTypeChartBar().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                    imgwriter2.close();

                } else {
                    root.put("display_graph_type_bar", 0);
                }

                if (jcbMedecins.getSelectedIndex() == 0) {
                    root.put("display_graph_exec_bar", 1);
                    FileOutputStream imgwriter2 = new FileOutputStream(dir + "/execbar.png");
                    encoder.encode(getExecutantChartBar().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                    imgwriter2.close();

                } else {
                    root.put("display_graph_exec_bar", 0);
                }

                if (jcbSource.getSelectedIndex() == 0) {
                    root.put("display_graph_source_bar", 1);
                    FileOutputStream imgwriter2 = new FileOutputStream(dir + "/sourcebar.png");
                    encoder.encode(getSourceChartBar().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                    imgwriter2.close();

                } else {
                    root.put("display_graph_source_bar", 0);
                }

                if (jcbPaye.getSelectedIndex() == 0) {
                    root.put("display_graph_paye_bar", 1);
                    FileOutputStream imgwriter2 = new FileOutputStream(dir + "/payebar.png");
                    encoder.encode(getImpayeChartBar().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                    imgwriter2.close();

                } else {
                    root.put("display_graph_paye_bar", 0);
                }


            } else {*/
                root.put("display_graph_type_bar", 0);
                root.put("display_graph_exec_bar", 0);
                root.put("display_graph_source_bar", 0);
                root.put("display_graph_paye_bar", 0);
            //}
            
            InputStream imgreader = getClass().getResourceAsStream("/gevi/images/entete.png");
            FileOutputStream imgwriter = new FileOutputStream(dir + "/entete.png");
            byte[] data = new byte[1024];

            while (imgreader.read(data) != -1) {
                imgwriter.write(data);
            }
            imgreader.close();
            imgwriter.close();

            Writer out = new FileWriter(address);
            temp.process(root, out);
            out.flush();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (TemplateException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (URISyntaxException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }

        return address;
    }

/*    JFreeChart getExecutantChart() {
        DefaultPieDataset ds = new DefaultPieDataset();

        for (int i = 0; i < _medecins.size(); i++) {
            Executant e = _medecins.get(i);
            String nom = e.getNom() + " " + e.getPrenom();
            try {
                double tmp = (Double) ds.getValue(nom);
                ds.setValue(nom, tmp + 1);
            } catch (org.jfree.data.UnknownKeyException ex) {
                double tmp = 1;
                ds.insertValue(ds.getKeys().size(), nom, tmp);
            }
        }

        JFreeChart chart;
        chart = ChartFactory.createPieChart("Répartition par médecin", ds, true, true, false);
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        ((PiePlot) chart.getPlot()).setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

            public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                return ((String) arg1) + ": " + ((Double) arg0.getValue(arg1)).toString();
            }

            public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                return new AttributedString(((String) arg1) + ": " + ((Double) arg0.getValue(arg1)).toString());
            }
        });
        return chart;
    }

    JFreeChart getImpayeChart() {
        DefaultPieDataset ds = new DefaultPieDataset();

        ds.insertValue(0, "Payé", 0.0);
        ds.insertValue(1, "Impayé", 0.0);

        for (int i = 0; i < _visites.size(); i++) {
            Visite v = _visites.get(i);
            double tmp = (Double) ds.getValue("Payé");
            ds.setValue("Payé", tmp+v.getSommePayée());

            tmp = (Double) ds.getValue("Impayé");
            ds.setValue("Impayé",tmp+ v.getTotal()-v.getSommePayée());

        }

        JFreeChart chart;
        chart = ChartFactory.createPieChart("Répartition payés/impayés", ds, true, true, false);
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        ((PiePlot) chart.getPlot()).setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

            public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df=new DecimalFormat("#,##0.00");
                return ((String)arg1)+ " - "+df.format((Double)arg0.getValue(arg1))+" €";
            }

            public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df=new DecimalFormat("#,##0.00");
                return new AttributedString(((String)arg1)+ " - "+df.format((Double)arg0.getValue(arg1))+" €");
            }
        });
        return chart;
    }

    JFreeChart getSourceChart() {
        DefaultPieDataset ds = new DefaultPieDataset();

        for (int i = 0; i < _visites.size(); i++) {
            Visite v = _visites.get(i);
            String nom = v.getSourcePayement();

            try {
                double tmp = (Double) ds.getValue(nom);
                ds.setValue(nom, tmp + v.getTotal());
            } catch (org.jfree.data.UnknownKeyException ex) {
                ds.insertValue(ds.getKeys().size(), nom, v.getTotal());
            }

        }

        JFreeChart chart;
        chart = ChartFactory.createPieChart("Répartition par source", ds, true, true, false);
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        ((PiePlot) chart.getPlot()).setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

           public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df=new DecimalFormat("#,##0.00");
                return ((String)arg1)+ " - "+df.format((Double)arg0.getValue(arg1))+" €";
            }

            public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                DecimalFormat df=new DecimalFormat("#,##0.00");
                return new AttributedString(((String)arg1)+ " - "+df.format((Double)arg0.getValue(arg1))+" €");
            }
        });
        return chart;
    }

    JFreeChart getTypeChart() {
        DefaultPieDataset ds = new DefaultPieDataset();

        for (int i = 0; i < _visites.size(); i++) {
            Visite v = _visites.get(i);
            String nom = v.getTypeVisite();

            try {
                double tmp = (Double) ds.getValue(nom);
                ds.setValue(nom, tmp + 1);
            } catch (org.jfree.data.UnknownKeyException ex) {
                double tmp = 1;
                ds.insertValue(ds.getKeys().size(), nom, tmp);
            }
        }

        JFreeChart chart;
        chart = ChartFactory.createPieChart("Répartition par type", ds, true, true, false);
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        ((PiePlot) chart.getPlot()).setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

            public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                return ((String) arg1) + ": " + ((Double) arg0.getValue(arg1)).toString();
            }

            public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                return new AttributedString(((String) arg1) + ": " + ((Double) arg0.getValue(arg1)).toString());
            }
        });
        return chart;
    }

     JFreeChart getExecutantChartBar() {
        DefaultCategoryDataset ds = new DefaultCategoryDataset();

        for (int i = 0; i < _medecins.size(); i++) {
            Executant e = _medecins.get(i);
            String nom = e.getNom() + " " + e.getPrenom();

            try {
                double tmp = (Double) ds.getValue("",nom);
                ds.setValue(tmp+1,"",nom);
            } catch (org.jfree.data.UnknownKeyException ex) {
                double tmp=1;
                ds.addValue(tmp, "", nom);
            }
        }

        JFreeChart chart;
        chart = ChartFactory.createBarChart("Visites par executant", "Executant", "Nombre de visites", ds, PlotOrientation.HORIZONTAL, false, false, false);

        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.blue,
                0.0f, 0.0f, new Color(0, 0, 64));
        renderer.setSeriesPaint(0, gp0);
        
        renderer.setSeriesItemLabelsVisible(0, true);
        ItemLabelPosition pos=new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

            public String generateRowLabel(CategoryDataset arg0, int arg1) {
                return ((Double)arg0.getValue("",arg0.getColumnKey(arg1))).toString().replace(".0", "");
            }

            public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                return ((Double)arg0.getValue("",arg0.getColumnKey(arg1))).toString().replace(".0", "");
            }

            public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                return ((Double)arg0.getValue(arg1,arg2)).toString().replace(".0", "");
            }
        });
        return chart;
    }

    JFreeChart getImpayeChartBar() {
        DefaultCategoryDataset ds = new DefaultCategoryDataset();

        ds.addValue(0.0, "", "Payé");
        ds.addValue(0.0, "", "Impayé");

        for (int i = 0; i < _visites.size(); i++) {
            Visite v = _visites.get(i);
             ds.incrementValue(v.getSommePayée(),"","Payé");
             ds.incrementValue(v.getTotal()-v.getSommePayée(),"","Impayé");
        }

        JFreeChart chart;
        chart = ChartFactory.createBarChart("Repartition vistes payées/impayées", "", "Montant", ds, PlotOrientation.HORIZONTAL, false, false, false);

        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.red,
                0.0f, 0.0f, new Color(64, 0,0));
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesItemLabelsVisible(0, true);
        ItemLabelPosition pos=new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

            public String generateRowLabel(CategoryDataset arg0, int arg1) {
                return ((Double)arg0.getValue("",arg0.getColumnKey(arg1))).toString()+" €";
            }

            public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                return ((Double)arg0.getValue("",arg0.getColumnKey(arg1))).toString()+" €";
            }

            public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                return ((Double)arg0.getValue(arg1,arg2)).toString()+" €";
            }

        });
        return chart;
    }

    JFreeChart getSourceChartBar() {
        DefaultCategoryDataset ds = new DefaultCategoryDataset();

        for (int i = 0; i < _visites.size(); i++) {
            Visite v = _visites.get(i);
            String nom = v.getSourcePayement();

             try {
                double tmp = (Double) ds.getValue("",nom);
                ds.incrementValue(v.getTotal(),"",nom);
            } catch (org.jfree.data.UnknownKeyException ex) {
                ds.addValue(v.getTotal(),"", nom);
            }

        }

        JFreeChart chart;
        chart = ChartFactory.createBarChart("Sources de payement", "Source", "Montant", ds, PlotOrientation.HORIZONTAL, false, false, false);

        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.green,
                0.0f, 0.0f, new Color(0, 64,0));
        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesItemLabelsVisible(0, true);
        ItemLabelPosition pos=new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

            public String generateRowLabel(CategoryDataset arg0, int arg1) {
                return ((Double)arg0.getValue("",arg0.getColumnKey(arg1))).toString()+" €";
            }

            public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                return ((Double)arg0.getValue("",arg0.getColumnKey(arg1))).toString()+" €";
            }

            public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                return ((Double)arg0.getValue(arg1,arg2)).toString()+" €";
            }

        });
        return chart;
    }

    JFreeChart getTypeChartBar() {
       DefaultCategoryDataset ds = new DefaultCategoryDataset();

        for (int i = 0; i < _visites.size(); i++) {
            Visite v = _visites.get(i);
            String nom = v.getTypeVisite();

             try {
                double tmp = (Double) ds.getValue("",nom);
                ds.incrementValue(1,"",nom);
            } catch (org.jfree.data.UnknownKeyException ex) {
                double tmp=1;
                ds.addValue(tmp,"", nom);
            }
        }

       JFreeChart chart;
        chart = ChartFactory.createBarChart("Visites par type", "Type", "Nombre", ds, PlotOrientation.HORIZONTAL, false, false, false);

        chart.setBackgroundPaint(new Color(255, 255, 255, 0));
        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, new Color(255, 255,0),
                0.0f, 0.0f, new Color(64, 64,0));
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesItemLabelsVisible(0, true);
        ItemLabelPosition pos=new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

            public String generateRowLabel(CategoryDataset arg0, int arg1) {
                return ((Double)arg0.getValue("",arg0.getColumnKey(arg1))).toString().replace(".0", "");
            }

            public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                return ((Double)arg0.getValue("",arg0.getColumnKey(arg1))).toString().replace(".0", "");
            }

            public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                return ((Double)arg0.getValue(arg1,arg2)).toString().replace(".0", "");
            }

        });
        return chart;
    }*/
}
