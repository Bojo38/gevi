/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifPeriodReport.java
 *
 * Created on 9 avr. 2009, 17:13:13
 */
package gevi.Views.jifCertifs;

import gevi.Views.jifReports.*;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import gevi.Model.Creneau;
import gevi.Views.*;
import gevi.Model.Document;
import gevi.Model.Executant;
import gevi.Model.Singleton;
import gevi.Model.Utilisateur;
import gevi.Views.jifGraphs.jifGraphActivite;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URISyntaxException;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import org.jfree.chart.encoders.KeypointPNGEncoderAdapter;

/**
 *
 * @author root
 */
public class jifCertif extends javax.swing.JInternalFrame {

    Utilisateur _data;
    int _type;
    public static final int CERTIF_GARDE_A_VUE = 0;
    public static final int CERTIF_HDT = 1;
    public static final int CERTIF_MISE_EN_BIERE = 2;
    public static final int CERTIF_COUPS_ET_BLESSURES = 3;

    /** Creates new form jifPeriodReport */
    public jifCertif(Utilisateur data, int type) {
        initComponents();
        this.setPreferredSize(new Dimension(640, 480));

        _data = data;
        _type = type;

        switch (_type) {
            case CERTIF_GARDE_A_VUE:
                this.setTitle("Certificat de garde à vue");
                break;
            case CERTIF_HDT:
                this.setTitle("Certificat d'hospitalisation à la demande d'un tiers");
                break;
            case CERTIF_MISE_EN_BIERE:
                this.setTitle("Certificat de mise en bière");
                break;
            case CERTIF_COUPS_ET_BLESSURES:
                this.setTitle("Certificat de coups et blessures");
                break;
        }

        try {
            jepHTML.setContentType("html");
            File f = genererRapport();
            jepHTML.setPage(f.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }

        try {
            this.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtImprimer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepHTML = new javax.swing.JEditorPane();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gevi/images/sos_blanc.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jbtOK.setText("OK");
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtImprimer.setText("Imprimer");
        jbtImprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimerActionPerformed(evt);
            }
        });
        jPanel1.add(jbtImprimer);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jepHTML.setContentType("text/html");
        jepHTML.setEditable(false);
        jScrollPane1.setViewportView(jepHTML);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        MainWindow.getMainWindow().closeWindow(this);
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimerActionPerformed
        try {
            jepHTML.print();

        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
}//GEN-LAST:event_jbtImprimerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtImprimer;
    private javax.swing.JButton jbtOK;
    private javax.swing.JEditorPane jepHTML;
    // End of variables declaration//GEN-END:variables

    public File genererRapport() {
        File address = null;

        try {
            Configuration cfg = new Configuration();
            URI uri=getClass().getResource("/gevi/templates").toURI();
            if (uri.toString().contains(".jar!"))
            {
                String tmp=uri.toString();
                tmp=tmp.substring(10, tmp.indexOf(".jar!")-4);
                tmp=tmp+"templates";
                cfg.setDirectoryForTemplateLoading(new File(tmp));
            }
            else
            {
                cfg.setDirectoryForTemplateLoading(new File(uri));
            }

            cfg.setObjectWrapper(new DefaultObjectWrapper());
            Template temp = null;

            switch (_type) {
                case CERTIF_GARDE_A_VUE:
                    temp = cfg.getTemplate("gav.html");
                    break;
                case CERTIF_HDT:
                    temp = cfg.getTemplate("hdt.html");
                    break;
                case CERTIF_MISE_EN_BIERE:
                    temp = cfg.getTemplate("meb.html");
                    break;
                case CERTIF_COUPS_ET_BLESSURES:
                    temp = cfg.getTemplate("ceb.html");
                    break;
            }

            Map root = new HashMap();

            SimpleDateFormat formatShort = new SimpleDateFormat("dd/MM/yyyy");
            root.put("nom", _data.getNom() + " " + _data.getPrenom());
            root.put("ADELI", _data.getAdeli());

            root.put("dateGeneration", formatShort.format(new Date()));

            switch (_type) {
                case CERTIF_GARDE_A_VUE:
                    address = File.createTempFile("gav", ".tmp");
                    break;
                case CERTIF_HDT:
                    address = File.createTempFile("hdt", ".tmp");
                    break;
                case CERTIF_MISE_EN_BIERE:
                    address = File.createTempFile("meb", ".tmp");
                    break;
                case CERTIF_COUPS_ET_BLESSURES:
                    address = File.createTempFile("ceb", ".tmp");
                    break;

            }
            address.deleteOnExit();

            File dir = address.getParentFile();

            InputStream imgreader = getClass().getResourceAsStream("/gevi/images/entete.gif");
            FileOutputStream imgwriter = new FileOutputStream(dir + "/entete.gif");
            byte[] data = new byte[1024];
            int nb = 0;
            while (imgreader.read(data) != -1) {
                imgwriter.write(data);
            }
            imgreader.close();
            imgwriter.close();

            Writer out = new FileWriter(address);
            temp.process(root, out);
            out.flush();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (TemplateException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (URISyntaxException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }

        return address;
    }
}
