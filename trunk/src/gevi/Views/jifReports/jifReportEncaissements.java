/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifPeriodReport.java
 *
 * Created on 9 avr. 2009, 17:13:13
 */
package gevi.Views.jifReports;

import gevi.Views.*;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import gevi.Model.Creneau;
import gevi.Model.Document;
import gevi.Model.Executant;
import gevi.Model.Singleton;
import gevi.Model.Visite;
import gevi.Views.jifGraphs.jifGraphEncaissements;
import java.net.URI;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URISyntaxException;
import java.text.AttributedString;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.encoders.KeypointPNGEncoderAdapter;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author root
 */
public class jifReportEncaissements extends javax.swing.JInternalFrame {

    Document _data;
    Date _debut;
    Date _fin;

    /** Creates new form jifPeriodReport */
    public jifReportEncaissements(Document data, Date debut, Date fin) {
        initComponents();
        this.setPreferredSize(new Dimension(640, 480));
        _data = data;
        _debut = debut;
        _fin = fin;

        SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
        String titre = "Rapport des encaissements du " + format.format(_debut) + " au " + format.format(_fin);
        this.setTitle(titre);

        try {
            jepHTML.setContentType("html");
            File f = genererRapport();
            jepHTML.setPage(f.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }

        try {
            this.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtImprimer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepHTML = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jcbDisplayVisites = new javax.swing.JCheckBox();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gevi/images/sos_rose.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jbtOK.setText("OK");
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtImprimer.setText("Imprimer");
        jbtImprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimerActionPerformed(evt);
            }
        });
        jPanel1.add(jbtImprimer);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jepHTML.setContentType("text/html");
        jepHTML.setEditable(false);
        jScrollPane1.setViewportView(jepHTML);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jcbDisplayVisites.setText("Afficher le d√©tail des visites");
        jcbDisplayVisites.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jcbDisplayVisites.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jcbDisplayVisites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDisplayVisitesActionPerformed(evt);
            }
        });
        jPanel2.add(jcbDisplayVisites);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        MainWindow.getMainWindow().closeWindow(this);
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimerActionPerformed
        try {
            jepHTML.print();

        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
}//GEN-LAST:event_jbtImprimerActionPerformed

    private void jcbDisplayVisitesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDisplayVisitesActionPerformed
        try {
            jepHTML.setContentType("html");
            File f = genererRapport();
            jepHTML.setPage(f.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jcbDisplayVisitesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtImprimer;
    private javax.swing.JButton jbtOK;
    private javax.swing.JCheckBox jcbDisplayVisites;
    private javax.swing.JEditorPane jepHTML;
    // End of variables declaration//GEN-END:variables

    public File genererRapport() {
        File address = null;

        try {
            Configuration cfg = new Configuration();
            URI uri=getClass().getResource("/gevi/templates").toURI();
            if (uri.toString().contains(".jar!"))
            {
                String tmp=uri.toString();
                tmp=tmp.substring(10, tmp.indexOf(".jar!")-4);
                tmp=tmp+"templates";
                cfg.setDirectoryForTemplateLoading(new File(tmp));
            }
            else
            {
                cfg.setDirectoryForTemplateLoading(new File(uri));
            }
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            Template temp = cfg.getTemplate("encaissements.html");

            Map root = new HashMap();
            Document doc = Singleton.instance().getDocument();
            DecimalFormat nf = new DecimalFormat();
            nf.setMaximumFractionDigits(2);
            nf.setMinimumFractionDigits(2);
            SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
            SimpleDateFormat formatShort = new SimpleDateFormat("dd/MM/yyyy");
            root.put("nom", doc.getUtilisateur().getNom() + " " + doc.getUtilisateur().getPrenom());
            root.put("ADELI", doc.getUtilisateur().getAdeli());


            HashMap date = new HashMap();
            date.put("debut", format.format(_debut));
            date.put("fin", format.format(_fin));
            root.put("dates", date);

            int nombre_astreintes = 0;
            int nombre_visites = 0;
            double somme_visites = 0;
            double somme_totale = 0;

            Vector parCreneau = new Vector();
            Vector parMedecin = new Vector();
            Vector parAstreinte = new Vector();
            Vector parVisite = new Vector();

            for (int i = 0; i < _data.getCreneaux().size(); i++) {
                Creneau c = _data.getCreneaux().get(i);
                if (c.getDate().equals(_debut) || c.getDate().equals(_fin) || (c.getDate().after(_debut) && c.getDate().before(_fin))) {

                    if (c.getAstreinte() && c.getAstreintePayee()) {
                        nombre_astreintes++;
                        HashMap astreinte = new HashMap();
                        astreinte.put("date", format.format(c.getDate()));
                        astreinte.put("medecin", c.getExecutant().getNom() + ", " + c.getExecutant().getPrenom());
                        astreinte.put("date_payement", format.format(c.getDatePayementAstreinte()));
                        astreinte.put("montant", nf.format(_data.getParametres().getTarifAstreinte()));
                        parAstreinte.add(astreinte);
                    }

                    for (int j = 0; j < c.getVisites().size(); j++) {
                        Visite v = c.getVisites().get(j);
                        if (v.getSommePay√©e()>0) {
                            nombre_visites++;
                            somme_visites += v.getSommePay√©e();
                            somme_totale += v.getTotal();

                            HashMap visite = new HashMap();
                            visite.put("date", format.format(c.getDate()));
                            visite.put("medecin", c.getExecutant().getNom() + ", " + c.getExecutant().getPrenom().replace("√©", "&eacute;").replace("√†", "&aacute;").replace("√ª","&ucirc;").replace("√™","&ecirc;").replace("√®","&egrave;"));
                            visite.put("patient", v.getNom().replace("√©", "&eacute;").replace("√†", "&aacute;").replace("√ª","&ucirc;").replace("√™","&ecirc;").replace("√®","&egrave;"));
                            visite.put("total", nf.format(v.getTotal()).replace("¬†", "&#160;"));
                            visite.put("somme", nf.format(v.getSommePay√©e()).replace("¬†", "&#160;"));
                            visite.put("source", v.getSourcesPayement().replace("√©", "&eacute;").replace("√†", "&aacute;").replace("√ª","&ucirc;").replace("√™","&ecirc;").replace("√®","&egrave;"));
                            visite.put("date_payement", v.getDatesPayement());
                            parVisite.add(visite);
                        }
                    }
                }
            }

            if (jcbDisplayVisites.isSelected())
            {
                root.put("display_visites",1);
            }
            else
            {
            root.put("display_visites",0);
            }

            root.put("astreintes", parAstreinte);
            root.put("visites", parVisite);
            root.put("dateGeneration", formatShort.format(new Date()));

            root.put("nombre_visites", Integer.toString(nombre_visites));
            root.put("nombre_astreintes", Integer.toString(nombre_astreintes));
            root.put("somme_visites", nf.format(somme_visites).replace("¬†", "&#160;"));
            root.put("somme_totale", nf.format(somme_totale).replace("¬†", "&#160;"));
            root.put("somme_astreintes", nf.format(nombre_astreintes * _data.getParametres().getTarifAstreinte()));

            root.put("dateGeneration", formatShort.format(new Date()));

            address = File.createTempFile("encaissements" + format.format(_debut)+"-"+format.format(_fin), ".tmp");
            address.deleteOnExit();

            File dir = address.getParentFile();

            /*if (jcbDisplayGraphBar.isSelected()) {

                KeypointPNGEncoderAdapter encoder = new KeypointPNGEncoderAdapter();
                encoder.setEncodingAlpha(true);

                root.put("display_graph_bar_type", 1);

                jifGraphEncaissements jif=new jifGraphEncaissements(_data, _debut, _fin);
                FileOutputStream imgwriter2 = new FileOutputStream(dir + "/bar_type.png");
                encoder.encode(jif.getTypeChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                imgwriter2.close();

                FileOutputStream imgwriter4 = new FileOutputStream(dir + "/bar_source.png");
                encoder.encode(jif.getSourceChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter4);
                imgwriter4.close();

                FileOutputStream imgwriter3 = new FileOutputStream(dir + "/bar_executant.png");
                encoder.encode(jif.getExecutantChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter3);
                imgwriter3.close();

                FileOutputStream imgwriter5 = new FileOutputStream(dir + "/bar_astreinte.png");
                encoder.encode(jif.getAstreinteChart().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter5);
                imgwriter5.close();

            } else {*/
                root.put("display_graph_bar_type", 0);
            /*}

            if (jcbDisplayGraphPie.isSelected()) {

                KeypointPNGEncoderAdapter encoder = new KeypointPNGEncoderAdapter();
                encoder.setEncodingAlpha(true);

                root.put("display_graph_pie", 1);
                jifGraphEncaissements jif=new jifGraphEncaissements(_data, _debut, _fin);

                FileOutputStream imgwriter2 = new FileOutputStream(dir + "/pie_type.png");
                encoder.encode(jif.getTypePie().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter2);
                imgwriter2.close();

                FileOutputStream imgwriter3 = new FileOutputStream(dir + "/pie_source.png");
                encoder.encode(jif.getSourcePie().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter3);
                imgwriter3.close();

                FileOutputStream imgwriter4 = new FileOutputStream(dir + "/pie_executant.png");
                encoder.encode(jif.getExecutantPie().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter4);
                imgwriter4.close();

                FileOutputStream imgwriter5 = new FileOutputStream(dir + "/pie_astreinte.png");
                encoder.encode(jif.getAstreintePie().createBufferedImage(640, 480, BufferedImage.BITMASK, null), imgwriter5);
                imgwriter5.close();


            } else {*/
                root.put("display_graph_pie", 0);
            /*}*/

            InputStream imgreader = getClass().getResourceAsStream("/gevi/images/entete.png");
            FileOutputStream imgwriter = new FileOutputStream(dir + "/entete.png");
            byte[] data = new byte[1024];
            int nb = 0;
            while (imgreader.read(data) != -1) {
                imgwriter.write(data);
            }
            imgreader.close();
            imgwriter.close();

            Writer out = new FileWriter(address);
            temp.process(root, out);
            out.flush();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (TemplateException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (URISyntaxException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }

        return address;
    }
}
