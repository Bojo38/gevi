/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifPeriodReport.java
 *
 * Created on 9 avr. 2009, 17:13:13
 */
package gevi.Views.jifReports;

import gevi.Views.*;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import gevi.Model.Categorie;
import gevi.Model.Creneau;
import gevi.Model.Depense;
import gevi.Model.Document;
import gevi.Model.Executant;
import gevi.Model.Singleton;
import gevi.Model.Visite;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URISyntaxException;
import java.text.AttributedString;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.net.URI;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.encoders.KeypointPNGEncoderAdapter;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;

/**
 *
 * @author root
 */
public class jifReportFrais extends javax.swing.JInternalFrame {

    Document _data;
    Vector<Depense> _frais;
    Date _debut;
    Date _fin;

    /** Creates new form jifPeriodReport */
    public jifReportFrais(Document data, Date debut, Date fin) {
        initComponents();
        this.setPreferredSize(new Dimension(640, 480));
        _data = data;

        _debut = debut;
        _fin = fin;
        SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
        String titre = "Rapport des dépenses du " + format.format(_debut) + " au " + format.format(_fin);

        this.setTitle(titre);

        int selectedCat[] = new int[_data.getCategories().size()];
        DefaultListModel model = new DefaultListModel();
        for (int cpt = 0; cpt < data.getCategories().size(); cpt++) {
            model.addElement(data.getCategories().get(cpt).getNom());
            selectedCat[cpt] = cpt;
        }
        jlsCategories.setModel(model);

        _frais = new Vector();
        jlsCategories.setSelectedIndices(selectedCat);

        jepHTML.setContentType("html");

        try {
            this.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        refreshFrais();

        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtImprimer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepHTML = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlsCategories = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gevi/images/sos_violet.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jbtOK.setText("OK");
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtImprimer.setText("Imprimer");
        jbtImprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimerActionPerformed(evt);
            }
        });
        jPanel1.add(jbtImprimer);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jepHTML.setContentType("text/html");
        jepHTML.setEditable(false);
        jScrollPane1.setViewportView(jepHTML);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Catégories"));

        jlsCategories.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlsCategories.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlsCategoriesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jlsCategories);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.LINE_START);
        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        MainWindow.getMainWindow().closeWindow(this);
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimerActionPerformed
        try {
            jepHTML.print();
        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
}//GEN-LAST:event_jbtImprimerActionPerformed

    private void jlsCategoriesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlsCategoriesValueChanged
        refreshFrais();
    }//GEN-LAST:event_jlsCategoriesValueChanged

    private void refreshFrais() {
        Vector<Categorie> categories = Singleton.instance().getDocument().getCategories();
        Vector<Depense> depenses = Singleton.instance().getDocument().getDepenses();
        Object selectedCategories[] = (Object[]) jlsCategories.getSelectedValues();
        _frais.clear();
        for (int i = 0; i < depenses.size(); i++) {
            Depense d = depenses.get(i);
            Date da = d.getDate();
            if ((da.before(_fin) && da.after(_debut)) || (da.equals(_fin)) || (da.equals(_debut))) {

                String categorie = d.getCategorie().getNom();
                boolean selectionne = false;
                for (int cpt = 0; cpt < selectedCategories.length; cpt++) {
                    if (((String) selectedCategories[cpt]).equals(categorie)) {
                        selectionne = true;
                        break;
                    }
                }
                if (selectionne) {
                    _frais.add(d);
                }
            }
        }

        try {
            File f = genererRapportFrais();
            jepHTML.setPage(f.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainWindow.getMainWindow(), e.getLocalizedMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtImprimer;
    private javax.swing.JButton jbtOK;
    private javax.swing.JEditorPane jepHTML;
    private javax.swing.JList jlsCategories;
    // End of variables declaration//GEN-END:variables

    public File genererRapportFrais() {
        File address = null;
        try {
            Configuration cfg = new Configuration();
            URI uri=getClass().getResource("/gevi/templates").toURI();
            if (uri.toString().contains(".jar!"))
            {
                String tmp=uri.toString();
                tmp=tmp.substring(10, tmp.indexOf(".jar!")-4);
                tmp=tmp+"templates";
                cfg.setDirectoryForTemplateLoading(new File(tmp));
            }
            else
            {
                cfg.setDirectoryForTemplateLoading(new File(uri));
            }
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            Template temp = cfg.getTemplate("frais.html");

            Map root = new HashMap();
            Document doc = Singleton.instance().getDocument();
            DecimalFormat nf = new DecimalFormat();
            nf.setMaximumFractionDigits(2);
            nf.setMinimumFractionDigits(2);
            SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
            SimpleDateFormat formatShort = new SimpleDateFormat("dd/MM/yyyy");

            root.put("nom", doc.getUtilisateur().getNom() + " " + doc.getUtilisateur().getPrenom());

            HashMap dates = new HashMap();
            dates.put("debut", formatShort.format(_debut));
            dates.put("fin", formatShort.format(_fin));
            root.put("dates", dates);
            root.put("nombre_depenses", Integer.toString(_frais.size()));

            double somme_totale = 0;

            Vector parDepense = new Vector();
            for (int cpt = 0; cpt < _frais.size(); cpt++) {
                Depense d = (Depense) _frais.get(cpt);

                somme_totale += d.getMontant();

                Map depense = new HashMap();
                depense.put("categorie", d.getCategorie().getNom());
                depense.put("date", formatShort.format(d.getDate()));
                depense.put("vendeur", d.getVendeur().replaceAll("é", "&eacute;").replaceAll("è", "&egrave;").replaceAll("à", "&agrave;").replaceAll("ç", "&ccedil;"));
                depense.put("objet", d.getObjet().replaceAll("é", "&eacute;").replaceAll("è", "&egrave;").replaceAll("à", "&agrave;").replaceAll("ç", "&ccedil;"));
                depense.put("montant", d.getMontant());

                parDepense.add(depense);
            }
            root.put("depenses", parDepense);
            root.put("somme_totale", somme_totale);

            if (jlsCategories.getSelectedValues().length == _data.getCategories().size()) {
                root.put("categories", "Toutes");
            } else {
                Object cats[] = jlsCategories.getSelectedValues();
                String tmp = "";

                for (int i = 0; i < cats.length; i++) {
                    if (i == 0) {
                        tmp += (String) cats[i];
                    } else {
                        tmp += ", " + (String) cats[i];
                    }
                }
                root.put("categories", tmp);
            }
            root.put("nb_categories", jlsCategories.getSelectedValues().length);


            root.put("dateGeneration", formatShort.format(new Date()));
            address = File.createTempFile("visites" + format.format(_debut) + "-" + format.format(_fin), ".tmp");
            address.deleteOnExit();

            File dir = address.getParentFile();

/*            if (jcbDisplayGraph.isSelected()) {
                root.put("display_graph", 1);

                Object selectedCategories[] = (Object[]) jlsCategories.getSelectedValues();
                DefaultCategoryDataset ds = new DefaultCategoryDataset();
                for (int cpt = 0; cpt < selectedCategories.length; cpt++) {
                    double tmp = 0.0;
                    ds.addValue(tmp, "", (String) selectedCategories[cpt]);
                }

                for (int i = 0; i < _frais.size(); i++) {
                    Depense d = _frais.get(i);
                    ds.incrementValue(d.getMontant(), "", d.getCategorie().getNom());
                }

                JFreeChart chart;
                chart = ChartFactory.createBarChart(null, "Catégories", "Montant", ds, PlotOrientation.HORIZONTAL, false, false, false);

                BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
                chart.getCategoryPlot().setBackgroundAlpha(0);
                GradientPaint gp0 = new GradientPaint(
                        0.0f, 0.0f, Color.blue,
                        0.0f, 0.0f, new Color(0, 0, 64));
                renderer.setSeriesPaint(0, gp0);
                chart.setBackgroundPaint(new Color(255, 255, 255, 0));
                renderer.setSeriesPaint(0, gp0);
                renderer.setSeriesItemLabelsVisible(0, true);
                renderer.setBaseItemLabelGenerator(new CategoryItemLabelGenerator() {

                    public String generateRowLabel(CategoryDataset arg0, int arg1) {
                        DecimalFormat df = new DecimalFormat("#,##0.00");
                        return df.format((Double) arg0.getValue("", arg0.getColumnKey(arg1))) + " €";
                    }

                    public String generateColumnLabel(CategoryDataset arg0, int arg1) {
                        DecimalFormat df = new DecimalFormat("#,##0.00");
                        return df.format((Double) arg0.getValue("", arg0.getColumnKey(arg1))) + " €";
                    }

                    public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                        DecimalFormat df = new DecimalFormat("#,##0.00");
                        return df.format((Double) arg0.getValue(arg1, arg2)) + " €";
                    }
                });
                KeypointPNGEncoderAdapter encoder = new KeypointPNGEncoderAdapter();
                encoder.setEncodingAlpha(true);
                FileOutputStream imgwriter2 = new FileOutputStream(dir + "/graph.png");
                encoder.encode(chart.createBufferedImage(320, 200, BufferedImage.BITMASK, null), imgwriter2);

            } else {*/
                root.put("display_graph", 0);
            /*}

            if (jcbDisplayGraph1.isSelected()) {
                root.put("display_graph2", 1);

                Object selectedCategories[] = (Object[]) jlsCategories.getSelectedValues();
                DefaultPieDataset ds = new DefaultPieDataset();
                for (int cpt = 0; cpt < selectedCategories.length; cpt++) {
                    double tmp = 0.0;
                    ds.insertValue(cpt, (String) selectedCategories[cpt], tmp);
                }

                for (int i = 0; i < _frais.size(); i++) {
                    Depense d = _frais.get(i);
                    double tmp = (Double) ds.getValue(d.getCategorie().getNom()) + d.getMontant();
                    ds.setValue(d.getCategorie().getNom(), tmp);
                }

                JFreeChart chart;
                chart = ChartFactory.createPieChart("", ds, false, false, false);
                chart.setBackgroundPaint(new Color(255, 255, 255, 0));
                chart.getPlot().setBackgroundAlpha(0);
                ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
                ((PiePlot) chart.getPlot()).setCircular(true);
                ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

                    public String generateSectionLabel(PieDataset arg0, Comparable arg1) {
                        DecimalFormat df = new DecimalFormat("#,##0.00");
                        return ((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €";
                    }

                    public AttributedString generateAttributedSectionLabel(PieDataset arg0, Comparable arg1) {
                        DecimalFormat df = new DecimalFormat("#,##0.00");
                        return new AttributedString(((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)) + " €");
                    }
                });

                KeypointPNGEncoderAdapter encoder = new KeypointPNGEncoderAdapter();
                encoder.setEncodingAlpha(true);
                FileOutputStream imgwriter2 = new FileOutputStream(dir + "/graph2.png");
                encoder.encode(chart.createBufferedImage(320, 200, BufferedImage.BITMASK, null), imgwriter2);

            } else {*/
                root.put("display_graph2", 0);
            //}

            InputStream imgreader = getClass().getResourceAsStream("/gevi/images/entete.png");
            FileOutputStream imgwriter = new FileOutputStream(dir + "/entete.png");
            byte[] data = new byte[1024];

            while (imgreader.read(data) != -1) {
                imgwriter.write(data);
            }
            imgreader.close();
            imgwriter.close();

            Writer out = new FileWriter(address);
            temp.process(root, out);
            out.flush();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (TemplateException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (URISyntaxException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }

        return address;
    }
}
