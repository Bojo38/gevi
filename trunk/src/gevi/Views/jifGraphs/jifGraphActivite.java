/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifPeriodReport.java
 *
 * Created on 9 avr. 2009, 17:13:13
 */
package gevi.Views.jifGraphs;

import gevi.Views.*;
import gevi.Model.Creneau;
import gevi.Model.Depense;
import gevi.Model.Document;
import gevi.Model.Executant;
import gevi.Model.Singleton;
import gevi.Model.Versement;
import gevi.Model.Visite;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.beans.PropertyVetoException;
import java.text.AttributedString;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author root
 */
public class jifGraphActivite extends javax.swing.JInternalFrame {

    Document _data;
    Date _debut;
    Date _fin;
    Vector<Visite> _visites;
    Vector<Creneau> _astreintes;
    Vector<Creneau> _creneaux;
    Vector<Executant> _medecins;
    Vector<Versement> _versements;
    Vector<Depense> _frais;
    ChartPanel _panelVisitesBar;
    ChartPanel _panelCreneauxBar;
    ChartPanel _panelVisitesPie;
    ChartPanel _panelCreneauxPie;

    /** Creates new form jifPeriodReport */
    public jifGraphActivite(Document data, Date debut, Date fin) {
        initComponents();
        this.setPreferredSize(new Dimension(640, 480));
        _data = data;

        _visites = new Vector();
        _astreintes = new Vector();
        _medecins = new Vector();
        _versements = new Vector();
        _frais = new Vector();
        _creneaux = new Vector();

        _debut = debut;
        _fin = fin;
        SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
        String titre = "Graphique d'activités du " + format.format(_debut) + " au " + format.format(_fin);

        this.setTitle(titre);

        JFreeChart chartGlobal = ChartFactory.createPieChart("", null, true, true, false);
        JFreeChart chartVersement = ChartFactory.createPieChart("", null, true, true, false);
        JFreeChart chartSource = ChartFactory.createPieChart("", null, true, true, false);
        JFreeChart chartType = ChartFactory.createPieChart("", null, true, true, false);

        _panelVisitesBar = new ChartPanel(chartGlobal);
        _panelCreneauxBar = new ChartPanel(chartVersement);
        _panelVisitesPie = new ChartPanel(chartSource);
        _panelCreneauxPie = new ChartPanel(chartType);

        jpn1.add(_panelVisitesBar, BorderLayout.CENTER);
        jpn2.add(_panelCreneauxBar, BorderLayout.CENTER);
        jpn3.add(_panelVisitesPie, BorderLayout.CENTER);
        jpn4.add(_panelCreneauxPie, BorderLayout.CENTER);

        try {
            this.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        refresh();
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jpn1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jbtImprimer1 = new javax.swing.JButton();
        jpn3 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jbtImprimer3 = new javax.swing.JButton();
        jpn2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jbtImprimer2 = new javax.swing.JButton();
        jpn4 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jbtImprimer = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jckRemplacant = new javax.swing.JCheckBox();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gevi/images/sos_bleu.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jbtOK.setText("OK");
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.GridLayout(2, 2));

        jpn1.setLayout(new java.awt.BorderLayout());

        jbtImprimer1.setText("Imprimer");
        jbtImprimer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimer1ActionPerformed(evt);
            }
        });
        jPanel7.add(jbtImprimer1);

        jpn1.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jpn1);

        jpn3.setLayout(new java.awt.BorderLayout());

        jbtImprimer3.setText("Imprimer");
        jbtImprimer3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimer3ActionPerformed(evt);
            }
        });
        jPanel9.add(jbtImprimer3);

        jpn3.add(jPanel9, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jpn3);

        jpn2.setLayout(new java.awt.BorderLayout());

        jbtImprimer2.setText("Imprimer");
        jbtImprimer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimer2ActionPerformed(evt);
            }
        });
        jPanel8.add(jbtImprimer2);

        jpn2.add(jPanel8, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jpn2);

        jpn4.setLayout(new java.awt.BorderLayout());

        jbtImprimer.setText("Imprimer");
        jbtImprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImprimerActionPerformed(evt);
            }
        });
        jPanel10.add(jbtImprimer);

        jpn4.add(jPanel10, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jpn4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jckRemplacant.setSelected(true);
        jckRemplacant.setText("Inclure les remplaçants");
        jckRemplacant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jckRemplacantActionPerformed(evt);
            }
        });
        jPanel4.add(jckRemplacant);

        getContentPane().add(jPanel4, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        MainWindow.getMainWindow().closeWindow(this);
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimerActionPerformed
        _panelCreneauxPie.createChartPrintJob();
}//GEN-LAST:event_jbtImprimerActionPerformed

    private void jbtImprimer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimer1ActionPerformed
        _panelVisitesBar.createChartPrintJob();
    }//GEN-LAST:event_jbtImprimer1ActionPerformed

    private void jbtImprimer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimer2ActionPerformed
        _panelCreneauxBar.createChartPrintJob();
    }//GEN-LAST:event_jbtImprimer2ActionPerformed

    private void jbtImprimer3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImprimer3ActionPerformed
        _panelVisitesPie.createChartPrintJob();
    }//GEN-LAST:event_jbtImprimer3ActionPerformed

    private void jckRemplacantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jckRemplacantActionPerformed
        refresh();
    }//GEN-LAST:event_jckRemplacantActionPerformed

    private void refresh() {
        _visites.clear();
        _astreintes.clear();
        _medecins.clear();
        _versements.clear();
        _frais.clear();
        _creneaux.clear();

        Vector<Creneau> cren = Singleton.instance().getDocument().getCreneaux();
        for (int i = 0; i < cren.size(); i++) {
            Creneau c = cren.get(i);
            Vector visites = c.getVisites();
            Date d = c.getDate();
            if ((d.before(_fin) && d.after(_debut)) || (d.equals(_fin)) || (d.equals(_debut))) {
                if (c.getAstreintePayee()) {
                    _astreintes.add(c);
                }

                for (int j = 0; j < c.getVisites().size(); j++) {
                    if (c.getVisites().get(j).getPaye()) {
                        _medecins.add(c.getExecutant());
                        _visites.add(c.getVisites().get(j));
                    }
                }

                _creneaux.add(c);
            }
        }

        Vector<Versement> vers = Singleton.instance().getDocument().getVersements();
        for (int i = 0; i < vers.size(); i++) {
            Versement v = vers.get(i);
            Date d = v.getDate();
            if ((d.before(_fin) && d.after(_debut)) || (d.equals(_fin)) || (d.equals(_debut))) {
                _versements.add(v);
            }
        }

        Vector<Depense> deps = Singleton.instance().getDocument().getDepenses();
        for (int i = 0; i < deps.size(); i++) {
            Depense p = deps.get(i);
            Date d = p.getDate();
            if ((d.before(_fin) && d.after(_debut)) || (d.equals(_fin)) || (d.equals(_debut))) {
                _frais.add(p);
            }
        }

        _panelVisitesBar.setChart(getVisiteBarChart(jckRemplacant.isSelected()));
        _panelVisitesPie.setChart(getVisitePieChart(jckRemplacant.isSelected()));
        _panelCreneauxBar.setChart(getCreneauxBarChart(jckRemplacant.isSelected()));
        _panelCreneauxPie.setChart(getCreneauxPieChart(jckRemplacant.isSelected()));

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbtImprimer;
    private javax.swing.JButton jbtImprimer1;
    private javax.swing.JButton jbtImprimer2;
    private javax.swing.JButton jbtImprimer3;
    private javax.swing.JButton jbtOK;
    private javax.swing.JCheckBox jckRemplacant;
    private javax.swing.JPanel jpn1;
    private javax.swing.JPanel jpn2;
    private javax.swing.JPanel jpn3;
    private javax.swing.JPanel jpn4;
    // End of variables declaration//GEN-END:variables

    public JFreeChart getVisiteBarChart(boolean remplacant) {
        DefaultCategoryDataset ds = new DefaultCategoryDataset();

        for (int i = 0; i < _creneaux.size(); i++) {
            Creneau c = _creneaux.get(i);
            Executant e = c.getExecutant();
            String nom = e.getNom() + " " + e.getPrenom();

            if (remplacant) {
                for (int j = 0; j < c.getVisites().size(); j++) {
                    Visite v = c.getVisites().get(j);
                    try {
                        double tmp = (Double) ds.getValue(v.getTypeVisite(), nom);
                        ds.setValue(tmp + 1, v.getTypeVisite(), nom);
                    } catch (org.jfree.data.UnknownKeyException ex) {
                        double tmp = 1;
                        ds.addValue(tmp, v.getTypeVisite(), nom);
                    } catch (NullPointerException ex) {
                        double tmp = 1;
                        ds.addValue(tmp, v.getTypeVisite(), nom);
                    }
                }
            } else {
                if (c.getExecutant().equals(_data.getUtilisateur())) {
                    for (int j = 0; j < c.getVisites().size(); j++) {
                        Visite v = c.getVisites().get(j);
                        try {
                            double tmp = (Double) ds.getValue("", v.getTypeVisite());
                            ds.setValue(tmp + 1, "", v.getTypeVisite());
                        } catch (org.jfree.data.UnknownKeyException ex) {
                            double tmp = 1;
                            ds.addValue(tmp, "", v.getTypeVisite());
                        } catch (NullPointerException ex) {
                            double tmp = 1;
                            ds.addValue(tmp, "", v.getTypeVisite());
                        }
                    }
                }
            }
        }

        JFreeChart chart;
        if (remplacant) {
            chart = ChartFactory.createStackedBarChart("Visites", "Médecin", "Nombre", ds, PlotOrientation.HORIZONTAL, true, true, false);
        } else {
            chart = ChartFactory.createStackedBarChart("Visites", "Type", "Nombre", ds, PlotOrientation.HORIZONTAL, false, true, false);
        }
        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        GradientPaint gp3 = new GradientPaint(
                0.0f, 0.0f, new Color(0, 255, 255),
                0.0f, 0.0f, new Color(0, 64, 64));
        renderer.setSeriesPaint(3, gp3);
        renderer.setSeriesItemLabelsVisible(
                3, true);
        GradientPaint gp1 = new GradientPaint(
                0.0f, 0.0f, Color.red,
                0.0f, 0.0f, new Color(64, 0, 0));
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesItemLabelsVisible(
                1, true);
        GradientPaint gp2 = new GradientPaint(
                0.0f, 0.0f, Color.green,
                0.0f, 0.0f, new Color(0, 64, 0));
        renderer.setSeriesPaint(2, gp2);
        renderer.setSeriesItemLabelsVisible(
                2, true);
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.blue,
                0.0f, 0.0f, new Color(0, 0, 64));
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesItemLabelsVisible(0, true);
        GradientPaint gp4 = new GradientPaint(
                0.0f, 0.0f, Color.yellow,
                0.0f, 0.0f, new Color(64, 64, 0));
        renderer.setSeriesPaint(4, gp4);
        renderer.setSeriesItemLabelsVisible(
                4, true);
        ItemLabelPosition pos = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setBaseItemLabelGenerator(
                new CategoryItemLabelGenerator() {

                    public String generateRowLabel(
                            CategoryDataset arg0, int arg1) {
                        DecimalFormat df = new DecimalFormat("#,##0");
                        return df.format((Double) arg0.getValue(arg0.getRowKey(arg1), ""));
                    }

                    public String generateColumnLabel(
                            CategoryDataset arg0, int arg1) {
                        DecimalFormat df = new DecimalFormat("#,##0");
                        return df.format((Double) arg0.getValue("", arg0.getColumnKey(arg1)));
                    }

                    public String generateLabel(
                            CategoryDataset arg0, int arg1, int arg2) {
                        DecimalFormat df = new DecimalFormat("#,##0");
                        return df.format((Double) arg0.getValue(arg1, arg2));
                    }
                });
        return chart;
    }

    public JFreeChart getCreneauxBarChart(boolean remplacant) {
        DefaultCategoryDataset ds = new DefaultCategoryDataset();


        for (int i = 0; i < _creneaux.size(); i++) {
            Creneau c = _creneaux.get(i);
            Executant e = c.getExecutant();
            String nom = e.getNom() + " " + e.getPrenom();

            if (remplacant) {
                if (c.getAstreinte()) {
                    try {
                        double tmp = (Double) ds.getValue("Créneau d'astreinte", nom);
                        ds.setValue(tmp + 1, "Créneau d'astreinte", nom);
                    } catch (org.jfree.data.UnknownKeyException ex) {
                        double tmp = 1;
                        ds.addValue(tmp, "Créneau d'astreinte", nom);
                    } catch (NullPointerException ex) {
                        double tmp = 1;
                        ds.addValue(tmp, "Créneau d'astreinte", nom);
                    }
                } else {
                    try {
                        double tmp = (Double) ds.getValue("Créneau simple", nom);
                        ds.setValue(tmp + 1, "Créneau simple", nom);
                    } catch (org.jfree.data.UnknownKeyException ex) {
                        double tmp = 1;
                        ds.addValue(tmp, "Créneau simple", nom);
                    } catch (NullPointerException ex) {
                        double tmp = 1;
                        ds.addValue(tmp, "Créneau simple", nom);
                    }
                }
            } else {
                if (c.getExecutant().equals(_data.getUtilisateur())) {
                    if (c.getAstreinte()) {
                        try {
                            double tmp = (Double) ds.getValue("", "Créneau d'astreinte");
                            ds.setValue(tmp + 1, "", "Créneau d'astreinte");
                        } catch (org.jfree.data.UnknownKeyException ex) {
                            double tmp = 1;
                            ds.addValue(tmp, "", "Créneau d'astreinte");
                        } catch (NullPointerException ex) {
                            double tmp = 1;
                            ds.addValue(tmp, "", "Créneau d'astreinte");
                        }
                    } else {
                        try {
                            double tmp = (Double) ds.getValue("", "Créneau simple");
                            ds.setValue(tmp + 1, "", "Créneau simple");
                        } catch (org.jfree.data.UnknownKeyException ex) {
                            double tmp = 1;
                            ds.addValue(tmp, "", "Créneau simple");
                        } catch (NullPointerException ex) {
                            double tmp = 1;
                            ds.addValue(tmp, "", "Créneau simple");
                        }
                    }
                }
            }
        }

        JFreeChart chart;
        if (remplacant) {
            chart = ChartFactory.createStackedBarChart("Créneaux", "Médecin", "Nombre", ds, PlotOrientation.HORIZONTAL, true, true, false);
        } else {
            chart = ChartFactory.createStackedBarChart("Créneaux", "Type", "Nombre", ds, PlotOrientation.HORIZONTAL, false, true, false);
        }
        BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();
        chart.getCategoryPlot().setBackgroundAlpha(0);
        GradientPaint gp3 = new GradientPaint(
                0.0f, 0.0f, new Color(0, 255, 255),
                0.0f, 0.0f, new Color(0, 64, 64));
        renderer.setSeriesPaint(3, gp3);
        renderer.setSeriesItemLabelsVisible(
                3, true);
        GradientPaint gp1 = new GradientPaint(
                0.0f, 0.0f, Color.red,
                0.0f, 0.0f, new Color(64, 0, 0));
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesItemLabelsVisible(
                1, true);
        GradientPaint gp2 = new GradientPaint(
                0.0f, 0.0f, Color.green,
                0.0f, 0.0f, new Color(0, 64, 0));
        renderer.setSeriesPaint(2, gp2);
        renderer.setSeriesItemLabelsVisible(
                2, true);
        GradientPaint gp0 = new GradientPaint(
                0.0f, 0.0f, Color.blue,
                0.0f, 0.0f, new Color(0, 0, 64));
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesItemLabelsVisible(0, true);
        GradientPaint gp4 = new GradientPaint(
                0.0f, 0.0f, Color.yellow,
                0.0f, 0.0f, new Color(64, 64, 0));
        renderer.setSeriesPaint(4, gp4);
        renderer.setSeriesItemLabelsVisible(
                4, true);
        ItemLabelPosition pos = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
        renderer.setBasePositiveItemLabelPosition(pos);
        renderer.setBaseItemLabelGenerator(
                new CategoryItemLabelGenerator() {

                    public String generateRowLabel(
                            CategoryDataset arg0, int arg1) {
                        DecimalFormat df = new DecimalFormat("#,##0");
                        return df.format((Double) arg0.getValue(arg0.getRowKey(arg1), ""));
                    }

                    public String generateColumnLabel(
                            CategoryDataset arg0, int arg1) {
                        DecimalFormat df = new DecimalFormat("#,##0");
                        return df.format((Double) arg0.getValue("", arg0.getColumnKey(arg1)));
                    }

                    public String generateLabel(
                            CategoryDataset arg0, int arg1, int arg2) {
                        DecimalFormat df = new DecimalFormat("#,##0");
                        return df.format((Double) arg0.getValue(arg1, arg2));
                    }
                });
        return chart;
    }

    public JFreeChart getVisitePieChart(boolean remplacant) {
        DefaultPieDataset ds = new DefaultPieDataset();

        for (int i = 0; i < _creneaux.size(); i++) {
            Creneau c = _creneaux.get(i);
            Executant e = c.getExecutant();
            if ((e.equals(_data.getUtilisateur())) || (remplacant)) {
                for (int j = 0; j < c.getVisites().size(); j++) {
                    Visite v = c.getVisites().get(j);
                    try {
                        double tmp = (Double) ds.getValue(v.getTypeVisite());
                        ds.setValue(v.getTypeVisite(), tmp + 1);
                    } catch (org.jfree.data.UnknownKeyException ex) {
                        double tmp = 1;
                        ds.insertValue(ds.getKeys().size(), v.getTypeVisite(), tmp);
                    } catch (NullPointerException ex) {
                        double tmp = 1;
                        ds.insertValue(ds.getKeys().size(), v.getTypeVisite(), tmp);
                    }
                }
            }
        }

        JFreeChart chart;
        chart = ChartFactory.createPieChart("Visites", ds, false, true, false);
        chart.getPlot().setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

            public String generateSectionLabel(
                    PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0");
                return ((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1));
            }

            public AttributedString generateAttributedSectionLabel(
                    PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0");
                return new AttributedString(((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)));
            }
        });
        return chart;
    }

    public JFreeChart getCreneauxPieChart(boolean remplacant) {
        DefaultPieDataset ds = new DefaultPieDataset();

        for (int i = 0; i < _creneaux.size(); i++) {
            Creneau c = _creneaux.get(i);
            Executant e = c.getExecutant();
            if ((e.equals(_data.getUtilisateur())) || (remplacant)) {

                if (c.getAstreinte()) {
                    try {
                        double tmp = (Double) ds.getValue("Créneau d'astreinte");
                        ds.setValue("Créneau d'astreinte", tmp + 1);
                    } catch (org.jfree.data.UnknownKeyException ex) {
                        double tmp = 1;
                        ds.insertValue(ds.getKeys().size(), "Créneau d'astreinte", tmp);
                    } catch (NullPointerException ex) {
                        double tmp = 1;
                        ds.insertValue(ds.getKeys().size(), "Créneau d'astreinte", tmp);
                    }
                } else {
                    try {
                        double tmp = (Double) ds.getValue("Créneau simple");
                        ds.setValue("Créneau simple", tmp + 1);
                    } catch (org.jfree.data.UnknownKeyException ex) {
                        double tmp = 1;
                        ds.insertValue(ds.getKeys().size(), "Créneau simple", tmp);
                    } catch (NullPointerException ex) {
                        double tmp = 1;
                        ds.insertValue(ds.getKeys().size(), "Créneau simple", tmp);
                    }
                }

            }
        }
        JFreeChart chart;
        chart = ChartFactory.createPieChart("Créneaux", ds, false, true, false);

        chart.getPlot().setBackgroundAlpha(0);
        ((PiePlot) chart.getPlot()).setSimpleLabels(true);
        ((PiePlot) chart.getPlot()).setIgnoreZeroValues(true);
        ((PiePlot) chart.getPlot()).setLabelGenerator(new PieSectionLabelGenerator() {

            public String generateSectionLabel(
                    PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0");
                return ((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1));
            }

            public AttributedString generateAttributedSectionLabel(
                    PieDataset arg0, Comparable arg1) {
                DecimalFormat df = new DecimalFormat("#,##0");
                return new AttributedString(((String) arg1) + " - " + df.format((Double) arg0.getValue(arg1)));
            }
        });

        return chart;
    }
}
